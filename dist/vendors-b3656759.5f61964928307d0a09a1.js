(self.webpackChunkremind=self.webpackChunkremind||[]).push([[783],{84480:(e,n,t)=>{"use strict";t.d(n,{Z:()=>h});var r=t(28481),c=t(90484),o=t(67294),a=t(42550),u=t(5110),i=t(73382),l=t(64019),s=t(91033),f=t(94999);function d(e,n){var t=null,c=null,o=new s.Z((function(e){var o=(0,r.Z)(e,1)[0].target;if(document.documentElement.contains(o)){var a=o.getBoundingClientRect(),u=a.width,i=a.height,l=Math.floor(u),s=Math.floor(i);t===l&&c===s||Promise.resolve().then((function(){n({width:l,height:s})})),t=l,c=s}}));return e&&o.observe(e),function(){o.disconnect()}}function m(e){return"function"!=typeof e?null:e()}function v(e){return"object"===(0,c.Z)(e)&&e?e:null}var p=o.forwardRef((function(e,n){var t=e.children,c=e.disabled,s=e.target,p=e.align,h=e.onAlign,y=e.monitorWindowResize,g=e.monitorBufferTime,b=void 0===g?0:g,k=o.useRef({}),C=o.useRef(),E=o.Children.only(t),Z=o.useRef({});Z.current.disabled=c,Z.current.target=s,Z.current.onAlign=h;var w=function(e,n){var t=o.useRef(!1),r=o.useRef(null);function c(){window.clearTimeout(r.current)}return[function e(o){if(t.current&&!0!==o)c(),r.current=window.setTimeout((function(){t.current=!1,e()}),n);else{if(!1===function(){var e=Z.current,n=e.disabled,t=e.target,r=e.onAlign;if(!n&&t){var c,o=C.current,a=m(t),l=v(t);k.current.element=a,k.current.point=l;var s=document.activeElement;return a&&(0,u.Z)(a)?c=(0,i.E3)(o,a,p):l&&(c=(0,i.zy)(o,l,p)),function(e,n){e!==document.activeElement&&(0,f.Z)(n,e)&&"function"==typeof e.focus&&e.focus()}(s,o),r&&c&&r(o,c),!0}return!1}())return;t.current=!0,c(),r.current=window.setTimeout((function(){t.current=!1}),n)}},function(){t.current=!1,c()}]}(0,b),N=(0,r.Z)(w,2),R=N[0],x=N[1],P=o.useRef({cancel:function(){}}),I=o.useRef({cancel:function(){}});o.useEffect((function(){var e,n,t=m(s),r=v(s);C.current!==I.current.element&&(I.current.cancel(),I.current.element=C.current,I.current.cancel=d(C.current,R)),k.current.element===t&&((e=k.current.point)===(n=r)||e&&n&&("pageX"in n&&"pageY"in n?e.pageX===n.pageX&&e.pageY===n.pageY:"clientX"in n&&"clientY"in n&&e.clientX===n.clientX&&e.clientY===n.clientY))||(R(),P.current.element!==t&&(P.current.cancel(),P.current.element=t,P.current.cancel=d(t,R)))})),o.useEffect((function(){c?x():R()}),[c]);var D=o.useRef(null);return o.useEffect((function(){y?D.current||(D.current=(0,l.Z)(window,"resize",R)):D.current&&(D.current.remove(),D.current=null)}),[y]),o.useEffect((function(){return function(){P.current.cancel(),I.current.cancel(),D.current&&D.current.remove(),x()}}),[]),o.useImperativeHandle(n,(function(){return{forceAlign:function(){return R(!0)}}})),o.isValidElement(E)&&(E=o.cloneElement(E,{ref:(0,a.sQ)(E.ref,C)})),E}));p.displayName="Align";const h=p},50132:(e,n,t)=>{"use strict";t.d(n,{Z:()=>p});var r=t(22122),c=t(96156),o=t(17375),a=t(28991),u=t(6610),i=t(5991),l=t(10379),s=t(60446),f=t(67294),d=t(94184),m=t.n(d),v=function(e){(0,l.Z)(t,e);var n=(0,s.Z)(t);function t(e){var r;(0,u.Z)(this,t),(r=n.call(this,e)).handleChange=function(e){var n=r.props,t=n.disabled,c=n.onChange;t||("checked"in r.props||r.setState({checked:e.target.checked}),c&&c({target:(0,a.Z)((0,a.Z)({},r.props),{},{checked:e.target.checked}),stopPropagation:function(){e.stopPropagation()},preventDefault:function(){e.preventDefault()},nativeEvent:e.nativeEvent}))},r.saveInput=function(e){r.input=e};var c="checked"in e?e.checked:e.defaultChecked;return r.state={checked:c},r}return(0,i.Z)(t,[{key:"focus",value:function(){this.input.focus()}},{key:"blur",value:function(){this.input.blur()}},{key:"render",value:function(){var e,n=this.props,t=n.prefixCls,a=n.className,u=n.style,i=n.name,l=n.id,s=n.type,d=n.disabled,v=n.readOnly,p=n.tabIndex,h=n.onClick,y=n.onFocus,g=n.onBlur,b=n.onKeyDown,k=n.onKeyPress,C=n.onKeyUp,E=n.autoFocus,Z=n.value,w=n.required,N=(0,o.Z)(n,["prefixCls","className","style","name","id","type","disabled","readOnly","tabIndex","onClick","onFocus","onBlur","onKeyDown","onKeyPress","onKeyUp","autoFocus","value","required"]),R=Object.keys(N).reduce((function(e,n){return"aria-"!==n.substr(0,5)&&"data-"!==n.substr(0,5)&&"role"!==n||(e[n]=N[n]),e}),{}),x=this.state.checked,P=m()(t,a,(e={},(0,c.Z)(e,"".concat(t,"-checked"),x),(0,c.Z)(e,"".concat(t,"-disabled"),d),e));return f.createElement("span",{className:P,style:u},f.createElement("input",(0,r.Z)({name:i,id:l,type:s,required:w,readOnly:v,disabled:d,tabIndex:p,className:"".concat(t,"-input"),checked:!!x,onClick:h,onFocus:y,onBlur:g,onKeyUp:C,onKeyDown:b,onKeyPress:k,onChange:this.handleChange,autoFocus:E,ref:this.saveInput,value:Z},R)),f.createElement("span",{className:"".concat(t,"-inner")}))}}],[{key:"getDerivedStateFromProps",value:function(e,n){return"checked"in e?(0,a.Z)((0,a.Z)({},n),{},{checked:e.checked}):null}}]),t}(f.Component);v.defaultProps={prefixCls:"rc-checkbox",className:"",style:{},type:"checkbox",defaultChecked:!1,onFocus:function(){},onBlur:function(){},onChange:function(){},onKeyDown:function(){},onKeyPress:function(){},onKeyUp:function(){}};const p=v},83230:(e,n,t)=>{"use strict";t.d(n,{Z:()=>Z});var r=t(22122),c=t(28481),o=t(67294),a=t(85133),u=t(28991),i=t(94184),l=t.n(i),s=t(15105),f=t(94999),d=t(60444);function m(e){var n=e.prefixCls,t=e.style,c=e.visible,a=e.maskProps,i=e.motionName;return o.createElement(d.Z,{key:"mask",visible:c,motionName:i,leavedClassName:"".concat(n,"-mask-hidden")},(function(e){var c=e.className,i=e.style;return o.createElement("div",(0,r.Z)({style:(0,u.Z)((0,u.Z)({},i),t),className:l()("".concat(n,"-mask"),c)},a))}))}function v(e,n,t){var r=n;return!r&&t&&(r="".concat(e,"-").concat(t)),r}var p=-1;function h(e,n){var t=e["page".concat(n?"Y":"X","Offset")],r="scroll".concat(n?"Top":"Left");if("number"!=typeof t){var c=e.document;"number"!=typeof(t=c.documentElement[r])&&(t=c.body[r])}return t}const y=o.memo((function(e){return e.children}),(function(e,n){return!n.shouldUpdate}));var g={width:0,height:0,overflow:"hidden",outline:"none"},b=o.forwardRef((function(e,n){var t=e.closable,a=e.prefixCls,i=e.width,s=e.height,f=e.footer,m=e.title,v=e.closeIcon,p=e.style,b=e.className,k=e.visible,C=e.forceRender,E=e.bodyStyle,Z=e.bodyProps,w=e.children,N=e.destroyOnClose,R=e.modalRender,x=e.motionName,P=e.ariaId,I=e.onClose,D=e.onVisibleChanged,K=e.onMouseDown,T=e.onMouseUp,A=e.mousePosition,O=(0,o.useRef)(),S=(0,o.useRef)(),U=(0,o.useRef)();o.useImperativeHandle(n,(function(){return{focus:function(){var e;null===(e=O.current)||void 0===e||e.focus()},changeActive:function(e){var n=document.activeElement;e&&n===S.current?O.current.focus():e||n!==O.current||S.current.focus()}}}));var B,F,M,X=o.useState(),Y=(0,c.Z)(X,2),z=Y[0],V=Y[1],L={};function q(){var e,n,t,r,c,o=(t={left:(n=(e=U.current).getBoundingClientRect()).left,top:n.top},c=(r=e.ownerDocument).defaultView||r.parentWindow,t.left+=h(c),t.top+=h(c,!0),t);V(A?"".concat(A.x-o.left,"px ").concat(A.y-o.top,"px"):"")}void 0!==i&&(L.width=i),void 0!==s&&(L.height=s),z&&(L.transformOrigin=z),f&&(B=o.createElement("div",{className:"".concat(a,"-footer")},f)),m&&(F=o.createElement("div",{className:"".concat(a,"-header")},o.createElement("div",{className:"".concat(a,"-title"),id:P},m))),t&&(M=o.createElement("button",{type:"button",onClick:I,"aria-label":"Close",className:"".concat(a,"-close")},v||o.createElement("span",{className:"".concat(a,"-close-x")})));var j=o.createElement("div",{className:"".concat(a,"-content")},M,F,o.createElement("div",(0,r.Z)({className:"".concat(a,"-body"),style:E},Z),w),B);return o.createElement(d.Z,{visible:k,onVisibleChanged:D,onAppearPrepare:q,onEnterPrepare:q,forceRender:C,motionName:x,removeOnLeave:N,ref:U},(function(e,n){var t=e.className,r=e.style;return o.createElement("div",{key:"dialog-element",role:"document",ref:n,style:(0,u.Z)((0,u.Z)((0,u.Z)({},r),p),L),className:l()(a,b,t),onMouseDown:K,onMouseUp:T},o.createElement("div",{tabIndex:0,ref:O,style:g,"aria-hidden":"true"}),o.createElement(y,{shouldUpdate:k||C},R?R(j):j),o.createElement("div",{tabIndex:0,ref:S,style:g,"aria-hidden":"true"}))}))}));b.displayName="Content";const k=b;function C(e){var n=e.prefixCls,t=void 0===n?"rc-dialog":n,a=e.zIndex,i=e.visible,d=void 0!==i&&i,h=e.keyboard,y=void 0===h||h,g=e.focusTriggerAfterClose,b=void 0===g||g,C=e.scrollLocker,E=e.title,Z=e.wrapStyle,w=e.wrapClassName,N=e.wrapProps,R=e.onClose,x=e.afterClose,P=e.transitionName,I=e.animation,D=e.closable,K=void 0===D||D,T=e.mask,A=void 0===T||T,O=e.maskTransitionName,S=e.maskAnimation,U=e.maskClosable,B=void 0===U||U,F=e.maskStyle,M=e.maskProps,X=(0,o.useRef)(),Y=(0,o.useRef)(),z=(0,o.useRef)(),V=o.useState(d),L=(0,c.Z)(V,2),q=L[0],j=L[1],H=(0,o.useRef)();function W(e){null==R||R(e)}H.current||(H.current="rcDialogTitle".concat(p+=1));var Q=(0,o.useRef)(!1),G=(0,o.useRef)(),J=null;return B&&(J=function(e){Q.current?Q.current=!1:Y.current===e.target&&W(e)}),(0,o.useEffect)((function(){return d&&j(!0),function(){}}),[d]),(0,o.useEffect)((function(){return function(){clearTimeout(G.current)}}),[]),(0,o.useEffect)((function(){return q?(null==C||C.lock(),null==C?void 0:C.unLock):function(){}}),[q,C]),o.createElement("div",{className:"".concat(t,"-root")},o.createElement(m,{prefixCls:t,visible:A&&d,motionName:v(t,O,S),style:(0,u.Z)({zIndex:a},F),maskProps:M}),o.createElement("div",(0,r.Z)({tabIndex:-1,onKeyDown:function(e){if(y&&e.keyCode===s.Z.ESC)return e.stopPropagation(),void W(e);d&&e.keyCode===s.Z.TAB&&z.current.changeActive(!e.shiftKey)},className:l()("".concat(t,"-wrap"),w),ref:Y,onClick:J,role:"dialog","aria-labelledby":E?H.current:null,style:(0,u.Z)((0,u.Z)({zIndex:a},Z),{},{display:q?null:"none"})},N),o.createElement(k,(0,r.Z)({},e,{onMouseDown:function(){clearTimeout(G.current),Q.current=!0},onMouseUp:function(){G.current=setTimeout((function(){Q.current=!1}))},ref:z,closable:K,ariaId:H.current,prefixCls:t,visible:d,onClose:W,onVisibleChanged:function(e){if(e){var n;(0,f.Z)(Y.current,document.activeElement)||(X.current=document.activeElement,null===(n=z.current)||void 0===n||n.focus())}else{if(j(!1),A&&X.current&&b){try{X.current.focus({preventScroll:!0})}catch(e){}X.current=null}q&&(null==x||x())}},motionName:v(t,P,I)}))))}var E=function(e){var n=e.visible,t=e.getContainer,u=e.forceRender,i=e.destroyOnClose,l=void 0!==i&&i,s=e.afterClose,f=o.useState(n),d=(0,c.Z)(f,2),m=d[0],v=d[1];return o.useEffect((function(){n&&v(!0)}),[n]),!1===t?o.createElement(C,(0,r.Z)({},e,{getOpenCount:function(){return 2}})):u||!l||m?o.createElement(a.Z,{visible:n,forceRender:u,getContainer:t},(function(n){return o.createElement(C,(0,r.Z)({},e,{destroyOnClose:l,afterClose:function(){null==s||s(),v(!1)}},n))})):null};E.displayName="Dialog";const Z=E}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,