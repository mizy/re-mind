(self.webpackChunkremind_editor=self.webpackChunkremind_editor||[]).push([[603],{34084:(e,t,n)=>{"use strict";n.d(t,{Z:()=>C});var o,r,a=n(22122),i=n(6610),s=n(5991),c=n(10379),l=n(60446),d=n(67294),u=n(28991),p=n(96156),f=n(4084),v=n(98423),h=n(94184),g=n.n(h),y="\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n",m=["letter-spacing","line-height","padding-top","padding-bottom","font-family","font-weight","font-size","font-variant","text-rendering","text-transform","width","text-indent","padding-left","padding-right","border-width","box-sizing"],k={};function E(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.getAttribute("id")||e.getAttribute("data-reactid")||e.getAttribute("name");if(t&&k[n])return k[n];var o=window.getComputedStyle(e),r=o.getPropertyValue("box-sizing")||o.getPropertyValue("-moz-box-sizing")||o.getPropertyValue("-webkit-box-sizing"),a=parseFloat(o.getPropertyValue("padding-bottom"))+parseFloat(o.getPropertyValue("padding-top")),i=parseFloat(o.getPropertyValue("border-bottom-width"))+parseFloat(o.getPropertyValue("border-top-width")),s=m.map((function(e){return"".concat(e,":").concat(o.getPropertyValue(e))})).join(";"),c={sizingStyle:s,paddingSize:a,borderSize:i,boxSizing:r};return t&&n&&(k[n]=c),c}!function(e){e[e.NONE=0]="NONE",e[e.RESIZING=1]="RESIZING",e[e.RESIZED=2]="RESIZED"}(r||(r={}));const b=function(e){(0,c.Z)(n,e);var t=(0,l.Z)(n);function n(e){var s;return(0,i.Z)(this,n),(s=t.call(this,e)).saveTextArea=function(e){s.textArea=e},s.handleResize=function(e){var t=s.state.resizeStatus,n=s.props,o=n.autoSize,a=n.onResize;t===r.NONE&&("function"==typeof a&&a(e),o&&s.resizeOnNextFrame())},s.resizeOnNextFrame=function(){cancelAnimationFrame(s.nextFrameActionId),s.nextFrameActionId=requestAnimationFrame(s.resizeTextarea)},s.resizeTextarea=function(){var e=s.props.autoSize;if(e&&s.textArea){var t=e.minRows,n=e.maxRows,a=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;o||((o=document.createElement("textarea")).setAttribute("tab-index","-1"),o.setAttribute("aria-hidden","true"),document.body.appendChild(o)),e.getAttribute("wrap")?o.setAttribute("wrap",e.getAttribute("wrap")):o.removeAttribute("wrap");var a=E(e,t),i=a.paddingSize,s=a.borderSize,c=a.boxSizing,l=a.sizingStyle;o.setAttribute("style","".concat(l,";").concat(y)),o.value=e.value||e.placeholder||"";var d,u=Number.MIN_SAFE_INTEGER,p=Number.MAX_SAFE_INTEGER,f=o.scrollHeight;if("border-box"===c?f+=s:"content-box"===c&&(f-=i),null!==n||null!==r){o.value=" ";var v=o.scrollHeight-i;null!==n&&(u=v*n,"border-box"===c&&(u=u+i+s),f=Math.max(u,f)),null!==r&&(p=v*r,"border-box"===c&&(p=p+i+s),d=f>p?"":"hidden",f=Math.min(p,f))}return{height:f,minHeight:u,maxHeight:p,overflowY:d,resize:"none"}}(s.textArea,!1,t,n);s.setState({textareaStyles:a,resizeStatus:r.RESIZING},(function(){cancelAnimationFrame(s.resizeFrameId),s.resizeFrameId=requestAnimationFrame((function(){s.setState({resizeStatus:r.RESIZED},(function(){s.resizeFrameId=requestAnimationFrame((function(){s.setState({resizeStatus:r.NONE}),s.fixFirefoxAutoScroll()}))}))}))}))}},s.renderTextArea=function(){var e=s.props,t=e.prefixCls,n=void 0===t?"rc-textarea":t,o=e.autoSize,i=e.onResize,c=e.className,l=e.disabled,h=s.state,y=h.textareaStyles,m=h.resizeStatus,k=(0,v.Z)(s.props,["prefixCls","onPressEnter","autoSize","defaultValue","onResize"]),E=g()(n,c,(0,p.Z)({},"".concat(n,"-disabled"),l));"value"in k&&(k.value=k.value||"");var b=(0,u.Z)((0,u.Z)((0,u.Z)({},s.props.style),y),m===r.RESIZING?{overflowX:"hidden",overflowY:"hidden"}:null);return d.createElement(f.Z,{onResize:s.handleResize,disabled:!(o||i)},d.createElement("textarea",(0,a.Z)({},k,{className:E,style:b,ref:s.saveTextArea})))},s.state={textareaStyles:{},resizeStatus:r.NONE},s}return(0,s.Z)(n,[{key:"componentDidMount",value:function(){this.resizeTextarea()}},{key:"componentDidUpdate",value:function(e){e.value!==this.props.value&&this.resizeTextarea()}},{key:"componentWillUnmount",value:function(){cancelAnimationFrame(this.nextFrameActionId),cancelAnimationFrame(this.resizeFrameId)}},{key:"fixFirefoxAutoScroll",value:function(){try{if(document.activeElement===this.textArea){var e=this.textArea.selectionStart,t=this.textArea.selectionEnd;this.textArea.setSelectionRange(e,t)}}catch(e){}}},{key:"render",value:function(){return this.renderTextArea()}}]),n}(d.Component),C=function(e){(0,c.Z)(n,e);var t=(0,l.Z)(n);function n(e){var o;(0,i.Z)(this,n),(o=t.call(this,e)).focus=function(){o.resizableTextArea.textArea.focus()},o.saveTextArea=function(e){o.resizableTextArea=e},o.handleChange=function(e){var t=o.props.onChange;o.setValue(e.target.value,(function(){o.resizableTextArea.resizeTextarea()})),t&&t(e)},o.handleKeyDown=function(e){var t=o.props,n=t.onPressEnter,r=t.onKeyDown;13===e.keyCode&&n&&n(e),r&&r(e)};var r=void 0===e.value||null===e.value?e.defaultValue:e.value;return o.state={value:r},o}return(0,s.Z)(n,[{key:"setValue",value:function(e,t){"value"in this.props||this.setState({value:e},t)}},{key:"blur",value:function(){this.resizableTextArea.textArea.blur()}},{key:"render",value:function(){return d.createElement(b,(0,a.Z)({},this.props,{value:this.state.value,onKeyDown:this.handleKeyDown,onChange:this.handleChange,ref:this.saveTextArea}))}}],[{key:"getDerivedStateFromProps",value:function(e){return"value"in e?{value:e.value}:null}}]),n}(d.Component)},51472:(e,t,n)=>{"use strict";n.d(t,{Z:()=>p});var o=n(22122),r=n(90484),a=n(28991),i=n(17375),s=n(67294),c=n(74768),l=n(43159);const d=function(e){var t=e.overlay,n=e.prefixCls,o=e.id,r=e.overlayInnerStyle;return s.createElement("div",{className:"".concat(n,"-inner"),id:o,role:"tooltip",style:r},"function"==typeof t?t():t)};var u=function(e,t){var n=e.overlayClassName,u=e.trigger,p=void 0===u?["hover"]:u,f=e.mouseEnterDelay,v=void 0===f?0:f,h=e.mouseLeaveDelay,g=void 0===h?.1:h,y=e.overlayStyle,m=e.prefixCls,k=void 0===m?"rc-tooltip":m,E=e.children,b=e.onVisibleChange,C=e.afterVisibleChange,N=e.transitionName,x=e.animation,w=e.motion,S=e.placement,O=void 0===S?"right":S,P=e.align,T=void 0===P?{}:P,D=e.destroyTooltipOnHide,Z=void 0!==D&&D,K=e.defaultVisible,M=e.getTooltipContainer,A=e.overlayInnerStyle,L=(0,i.Z)(e,["overlayClassName","trigger","mouseEnterDelay","mouseLeaveDelay","overlayStyle","prefixCls","children","onVisibleChange","afterVisibleChange","transitionName","animation","motion","placement","align","destroyTooltipOnHide","defaultVisible","getTooltipContainer","overlayInnerStyle"]),R=(0,s.useRef)(null);(0,s.useImperativeHandle)(t,(function(){return R.current}));var I=(0,a.Z)({},L);"visible"in e&&(I.popupVisible=e.visible);var F=!1,H=!1;if("boolean"==typeof Z)F=Z;else if(Z&&"object"===(0,r.Z)(Z)){var U=Z.keepParent;F=!0===U,H=!1===U}return s.createElement(c.Z,(0,o.Z)({popupClassName:n,prefixCls:k,popup:function(){var t=e.arrowContent,n=void 0===t?null:t,o=e.overlay,r=e.id;return[s.createElement("div",{className:"".concat(k,"-arrow"),key:"arrow"},n),s.createElement(d,{key:"content",prefixCls:k,id:r,overlay:o,overlayInnerStyle:A})]},action:p,builtinPlacements:l.C,popupPlacement:O,ref:R,popupAlign:T,getPopupContainer:M,onPopupVisibleChange:b,afterPopupVisibleChange:C,popupTransitionName:N,popupAnimation:x,popupMotion:w,defaultPopupVisible:K,destroyPopupOnHide:F,autoDestroy:H,mouseLeaveDelay:g,popupStyle:y,mouseEnterDelay:v},I),E)};const p=(0,s.forwardRef)(u)},43159:(e,t,n)=>{"use strict";n.d(t,{C:()=>a});var o={adjustX:1,adjustY:1},r=[0,0],a={left:{points:["cr","cl"],overflow:o,offset:[-4,0],targetOffset:r},right:{points:["cl","cr"],overflow:o,offset:[4,0],targetOffset:r},top:{points:["bc","tc"],overflow:o,offset:[0,-4],targetOffset:r},bottom:{points:["tc","bc"],overflow:o,offset:[0,4],targetOffset:r},topLeft:{points:["bl","tl"],overflow:o,offset:[0,-4],targetOffset:r},leftTop:{points:["tr","tl"],overflow:o,offset:[-4,0],targetOffset:r},topRight:{points:["br","tr"],overflow:o,offset:[0,-4],targetOffset:r},rightTop:{points:["tl","tr"],overflow:o,offset:[4,0],targetOffset:r},bottomRight:{points:["tr","br"],overflow:o,offset:[0,4],targetOffset:r},rightBottom:{points:["bl","br"],overflow:o,offset:[4,0],targetOffset:r},bottomLeft:{points:["tl","bl"],overflow:o,offset:[0,4],targetOffset:r},leftBottom:{points:["br","bl"],overflow:o,offset:[-4,0],targetOffset:r}}},4258:(e,t,n)=>{"use strict";n.d(t,{Z:()=>N});var o=n(22122),r=n(96156),a=n(17375),i=n(28991),s=n(6610),c=n(5991),l=n(63349),d=n(10379),u=n(60446),p=n(67294),f=n(94184),v=n.n(f),h=n(27822),g=n(10225);const y=function(e){for(var t=e.prefixCls,n=e.level,o=e.isStart,a=e.isEnd,i="".concat(t,"-indent-unit"),s=[],c=0;c<n;c+=1){var l;s.push(p.createElement("span",{key:c,className:v()(i,(l={},(0,r.Z)(l,"".concat(i,"-start"),o[c]),(0,r.Z)(l,"".concat(i,"-end"),a[c]),l))}))}return p.createElement("span",{"aria-hidden":"true",className:"".concat(t,"-indent")},s)};var m=n(1089),k="open",E="close",b=function(e){(0,d.Z)(n,e);var t=(0,u.Z)(n);function n(){var e;return(0,s.Z)(this,n),(e=t.apply(this,arguments)).state={dragNodeHighlight:!1},e.onSelectorClick=function(t){(0,e.props.context.onNodeClick)(t,(0,m.F)(e.props)),e.isSelectable()?e.onSelect(t):e.onCheck(t)},e.onSelectorDoubleClick=function(t){(0,e.props.context.onNodeDoubleClick)(t,(0,m.F)(e.props))},e.onSelect=function(t){if(!e.isDisabled()){var n=e.props.context.onNodeSelect;t.preventDefault(),n(t,(0,m.F)(e.props))}},e.onCheck=function(t){if(!e.isDisabled()){var n=e.props,o=n.disableCheckbox,r=n.checked,a=e.props.context.onNodeCheck;if(e.isCheckable()&&!o){t.preventDefault();var i=!r;a(t,(0,m.F)(e.props),i)}}},e.onMouseEnter=function(t){(0,e.props.context.onNodeMouseEnter)(t,(0,m.F)(e.props))},e.onMouseLeave=function(t){(0,e.props.context.onNodeMouseLeave)(t,(0,m.F)(e.props))},e.onContextMenu=function(t){(0,e.props.context.onNodeContextMenu)(t,(0,m.F)(e.props))},e.onDragStart=function(t){var n=e.props.context.onNodeDragStart;t.stopPropagation(),e.setState({dragNodeHighlight:!0}),n(t,(0,l.Z)(e));try{t.dataTransfer.setData("text/plain","")}catch(e){}},e.onDragEnter=function(t){var n=e.props.context.onNodeDragEnter;t.preventDefault(),t.stopPropagation(),n(t,(0,l.Z)(e))},e.onDragOver=function(t){var n=e.props.context.onNodeDragOver;t.preventDefault(),t.stopPropagation(),n(t,(0,l.Z)(e))},e.onDragLeave=function(t){var n=e.props.context.onNodeDragLeave;t.stopPropagation(),n(t,(0,l.Z)(e))},e.onDragEnd=function(t){var n=e.props.context.onNodeDragEnd;t.stopPropagation(),e.setState({dragNodeHighlight:!1}),n(t,(0,l.Z)(e))},e.onDrop=function(t){var n=e.props.context.onNodeDrop;t.preventDefault(),t.stopPropagation(),e.setState({dragNodeHighlight:!1}),n(t,(0,l.Z)(e))},e.onExpand=function(t){var n=e.props,o=n.loading,r=n.context.onNodeExpand;o||r(t,(0,m.F)(e.props))},e.setSelectHandle=function(t){e.selectHandle=t},e.getNodeState=function(){var t=e.props.expanded;return e.isLeaf()?null:t?k:E},e.hasChildren=function(){var t=e.props.eventKey;return!!((e.props.context.keyEntities[t]||{}).children||[]).length},e.isLeaf=function(){var t=e.props,n=t.isLeaf,o=t.loaded,r=e.props.context.loadData,a=e.hasChildren();return!1!==n&&(n||!r&&!a||r&&o&&!a)},e.isDisabled=function(){var t=e.props.disabled;return!(!e.props.context.disabled&&!t)},e.isCheckable=function(){var t=e.props.checkable,n=e.props.context.checkable;return!(!n||!1===t)&&n},e.syncLoadData=function(t){var n=t.expanded,o=t.loading,r=t.loaded,a=e.props.context,i=a.loadData,s=a.onNodeLoad;o||i&&n&&!e.isLeaf()&&(e.hasChildren()||r||s((0,m.F)(e.props)))},e.renderSwitcherIconDom=function(t){var n=e.props.switcherIcon,o=e.props.context.switcherIcon,r=n||o;return"function"==typeof r?r((0,i.Z)((0,i.Z)({},e.props),{},{isLeaf:t})):r},e.renderSwitcher=function(){var t=e.props.expanded,n=e.props.context.prefixCls;if(e.isLeaf()){var o=e.renderSwitcherIconDom(!0);return!1!==o?p.createElement("span",{className:v()("".concat(n,"-switcher"),"".concat(n,"-switcher-noop"))},o):null}var r=v()("".concat(n,"-switcher"),"".concat(n,"-switcher_").concat(t?k:E)),a=e.renderSwitcherIconDom(!1);return!1!==a?p.createElement("span",{onClick:e.onExpand,className:r},a):null},e.renderCheckbox=function(){var t=e.props,n=t.checked,o=t.halfChecked,r=t.disableCheckbox,a=e.props.context.prefixCls,i=e.isDisabled(),s=e.isCheckable();if(!s)return null;var c="boolean"!=typeof s?s:null;return p.createElement("span",{className:v()("".concat(a,"-checkbox"),n&&"".concat(a,"-checkbox-checked"),!n&&o&&"".concat(a,"-checkbox-indeterminate"),(i||r)&&"".concat(a,"-checkbox-disabled")),onClick:e.onCheck},c)},e.renderIcon=function(){var t=e.props.loading,n=e.props.context.prefixCls;return p.createElement("span",{className:v()("".concat(n,"-iconEle"),"".concat(n,"-icon__").concat(e.getNodeState()||"docu"),t&&"".concat(n,"-icon_loading"))})},e.renderSelector=function(){var t,n,o=e.state.dragNodeHighlight,r=e.props,a=r.title,i=r.selected,s=r.icon,c=r.loading,l=r.data,d=e.props.context,u=d.prefixCls,f=d.showIcon,h=d.icon,g=d.draggable,y=d.loadData,m=d.titleRender,k=e.isDisabled(),E="function"==typeof g?g(l):g,b="".concat(u,"-node-content-wrapper");if(f){var C=s||h;t=C?p.createElement("span",{className:v()("".concat(u,"-iconEle"),"".concat(u,"-icon__customize"))},"function"==typeof C?C(e.props):C):e.renderIcon()}else y&&c&&(t=e.renderIcon());n="function"==typeof a?a(l):m?m(l):a;var N=p.createElement("span",{className:"".concat(u,"-title")},n);return p.createElement("span",{ref:e.setSelectHandle,title:"string"==typeof a?a:"",className:v()("".concat(b),"".concat(b,"-").concat(e.getNodeState()||"normal"),!k&&(i||o)&&"".concat(u,"-node-selected"),!k&&E&&"draggable"),draggable:!k&&E||void 0,"aria-grabbed":!k&&E||void 0,onMouseEnter:e.onMouseEnter,onMouseLeave:e.onMouseLeave,onContextMenu:e.onContextMenu,onClick:e.onSelectorClick,onDoubleClick:e.onSelectorDoubleClick,onDragStart:E?e.onDragStart:void 0},t,N,e.renderDropIndicator())},e.renderDropIndicator=function(){var t=e.props,n=t.disabled,o=t.eventKey,r=e.props.context,a=r.draggable,i=r.dropLevelOffset,s=r.dropPosition,c=r.prefixCls,l=r.indent,d=r.dropIndicatorRender,u=r.dragOverNodeKey,p=r.direction;return n||!1===a||u!==o?null:d({dropPosition:s,dropLevelOffset:i,indent:l,prefixCls:c,direction:p})},e}return(0,c.Z)(n,[{key:"componentDidMount",value:function(){this.syncLoadData(this.props)}},{key:"componentDidUpdate",value:function(){this.syncLoadData(this.props)}},{key:"isSelectable",value:function(){var e=this.props.selectable,t=this.props.context.selectable;return"boolean"==typeof e?e:t}},{key:"render",value:function(){var e,t=this.props,n=t.eventKey,i=t.className,s=t.style,c=t.dragOver,l=t.dragOverGapTop,d=t.dragOverGapBottom,u=t.isLeaf,f=t.isStart,h=t.isEnd,k=t.expanded,E=t.selected,b=t.checked,C=t.halfChecked,N=t.loading,x=t.domRef,w=t.active,S=t.data,O=t.onMouseMove,P=(0,a.Z)(t,["eventKey","className","style","dragOver","dragOverGapTop","dragOverGapBottom","isLeaf","isStart","isEnd","expanded","selected","checked","halfChecked","loading","domRef","active","data","onMouseMove"]),T=this.props.context,D=T.prefixCls,Z=T.filterTreeNode,K=T.draggable,M=T.keyEntities,A=T.dropContainerKey,L=T.dropTargetKey,R=this.isDisabled(),I=(0,g.NL)(P),F=(M[n]||{}).level,H=h[h.length-1],U="function"==typeof K?K(S):K;return p.createElement("div",(0,o.Z)({ref:x,className:v()(i,"".concat(D,"-treenode"),(e={},(0,r.Z)(e,"".concat(D,"-treenode-disabled"),R),(0,r.Z)(e,"".concat(D,"-treenode-switcher-").concat(k?"open":"close"),!u),(0,r.Z)(e,"".concat(D,"-treenode-checkbox-checked"),b),(0,r.Z)(e,"".concat(D,"-treenode-checkbox-indeterminate"),C),(0,r.Z)(e,"".concat(D,"-treenode-selected"),E),(0,r.Z)(e,"".concat(D,"-treenode-loading"),N),(0,r.Z)(e,"".concat(D,"-treenode-active"),w),(0,r.Z)(e,"".concat(D,"-treenode-leaf-last"),H),(0,r.Z)(e,"drop-target",L===n),(0,r.Z)(e,"drop-container",A===n),(0,r.Z)(e,"drag-over",!R&&c),(0,r.Z)(e,"drag-over-gap-top",!R&&l),(0,r.Z)(e,"drag-over-gap-bottom",!R&&d),(0,r.Z)(e,"filter-node",Z&&Z((0,m.F)(this.props))),e)),style:s,onDragEnter:U?this.onDragEnter:void 0,onDragOver:U?this.onDragOver:void 0,onDragLeave:U?this.onDragLeave:void 0,onDrop:U?this.onDrop:void 0,onDragEnd:U?this.onDragEnd:void 0,onMouseMove:O},I),p.createElement(y,{prefixCls:D,level:F,isStart:f,isEnd:h}),this.renderSwitcher(),this.renderCheckbox(),this.renderSelector())}}]),n}(p.Component),C=function(e){return p.createElement(h.k.Consumer,null,(function(t){return p.createElement(b,(0,o.Z)({},e,{context:t}))}))};C.displayName="TreeNode",C.defaultProps={title:"---"},C.isTreeNode=1;const N=C},27822:(e,t,n)=>{"use strict";n.d(t,{k:()=>o});var o=n(67294).createContext(null)},28361:(e,t,n)=>{"use strict";n.d(t,{O:()=>x.Z,Z:()=>z});var o=n(22122),r=n(96156),a=n(28991),i=n(85061),s=n(6610),c=n(5991),l=n(63349),d=n(10379),u=n(60446),p=n(67294),f=n(15105),v=n(80334),h=n(94184),g=n.n(h),y=n(27822),m=n(10225),k=n(1089),E=n(28481),b=n(17375),C=n(7606),N=n(60444),x=n(4258),w=function(e,t){var n=e.className,r=e.style,a=e.motion,i=e.motionNodes,s=e.motionType,c=e.onMotionStart,l=e.onMotionEnd,d=e.active,u=e.treeNodeRequiredProps,f=(0,b.Z)(e,["className","style","motion","motionNodes","motionType","onMotionStart","onMotionEnd","active","treeNodeRequiredProps"]),v=p.useState(!0),h=(0,E.Z)(v,2),m=h[0],C=h[1],w=p.useContext(y.k).prefixCls,S=p.useRef(!1),O=function(){S.current||l(),S.current=!0};return(0,p.useEffect)((function(){i&&"hide"===s&&m&&C(!1)}),[i]),(0,p.useEffect)((function(){return i&&c(),function(){i&&O()}}),[]),i?p.createElement(N.Z,(0,o.Z)({ref:t,visible:m},a,{motionAppear:"show"===s,onAppearEnd:O,onLeaveEnd:O}),(function(e,t){var n=e.className,r=e.style;return p.createElement("div",{ref:t,className:g()("".concat(w,"-treenode-motion"),n),style:r},i.map((function(e){var t=e.data,n=t.key,r=(0,b.Z)(t,["key"]),a=e.isStart,i=e.isEnd;delete r.children;var s=(0,k.H8)(n,u);return p.createElement(x.Z,(0,o.Z)({},r,s,{active:d,data:e.data,key:n,isStart:a,isEnd:i}))})))})):p.createElement(x.Z,(0,o.Z)({domRef:t,className:n,style:r},f,{active:d}))};w.displayName="MotionTreeNode";const S=p.forwardRef(w);function O(e,t,n){var o=e.findIndex((function(e){return e.data.key===n})),r=e[o+1],a=t.findIndex((function(e){return e.data.key===n}));if(r){var i=t.findIndex((function(e){return e.data.key===r.data.key}));return t.slice(a+1,i)}return t.slice(a+1)}var P={width:0,height:0,display:"flex",overflow:"hidden",opacity:0,border:0,padding:0,margin:0},T=function(){},D="RC_TREE_MOTION_".concat(Math.random()),Z={key:D},K={key:D,level:0,index:0,pos:"0",node:Z},M={parent:null,children:[],pos:K.pos,data:Z,isStart:[],isEnd:[]};function A(e,t,n,o){return!1!==t&&n?e.slice(0,Math.ceil(n/o)+1):e}function L(e){var t=e.data.key,n=e.pos;return(0,k.km)(t,n)}var R=function(e,t){var n=e.prefixCls,r=e.data,a=(e.selectable,e.checkable,e.expandedKeys),i=e.selectedKeys,s=e.checkedKeys,c=e.loadedKeys,l=e.loadingKeys,d=e.halfCheckedKeys,u=e.keyEntities,f=e.disabled,v=e.dragging,h=e.dragOverNodeKey,g=e.dropPosition,y=e.motion,m=e.height,N=e.itemHeight,x=e.virtual,w=e.focusable,Z=e.activeItem,K=e.focused,R=e.tabIndex,I=e.onKeyDown,F=e.onFocus,H=e.onBlur,U=e.onActiveChange,_=e.onListChangeStart,V=e.onListChangeEnd,z=(0,b.Z)(e,["prefixCls","data","selectable","checkable","expandedKeys","selectedKeys","checkedKeys","loadedKeys","loadingKeys","halfCheckedKeys","keyEntities","disabled","dragging","dragOverNodeKey","dropPosition","motion","height","itemHeight","virtual","focusable","activeItem","focused","tabIndex","onKeyDown","onFocus","onBlur","onActiveChange","onListChangeStart","onListChangeEnd"]),j=p.useRef(null),B=p.useRef(null);p.useImperativeHandle(t,(function(){return{scrollTo:function(e){j.current.scrollTo(e)},getIndentWidth:function(){return B.current.offsetWidth}}}));var W=p.useState(a),G=(0,E.Z)(W,2),q=G[0],Y=G[1],X=p.useState(r),Q=(0,E.Z)(X,2),$=Q[0],J=Q[1],ee=p.useState(r),te=(0,E.Z)(ee,2),ne=te[0],oe=te[1],re=p.useState([]),ae=(0,E.Z)(re,2),ie=ae[0],se=ae[1],ce=p.useState(null),le=(0,E.Z)(ce,2),de=le[0],ue=le[1];function pe(){J(r),oe(r),se([]),ue(null),V()}p.useEffect((function(){Y(a);var e=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=e.length,o=t.length;if(1!==Math.abs(n-o))return{add:!1,key:null};function r(e,t){var n=new Map;e.forEach((function(e){n.set(e,!0)}));var o=t.filter((function(e){return!n.has(e)}));return 1===o.length?o[0]:null}return n<o?{add:!0,key:r(e,t)}:{add:!1,key:r(t,e)}}(q,a);if(null!==e.key)if(e.add){var t=$.findIndex((function(t){return t.data.key===e.key})),n=A(O($,r,e.key),x,m,N),o=$.slice();o.splice(t+1,0,M),oe(o),se(n),ue("show")}else{var i=r.findIndex((function(t){return t.data.key===e.key})),s=A(O(r,$,e.key),x,m,N),c=r.slice();c.splice(i+1,0,M),oe(c),se(s),ue("hide")}else $!==r&&(J(r),oe(r))}),[a,r]),p.useEffect((function(){v||pe()}),[v]);var fe=y?ne:r,ve={expandedKeys:a,selectedKeys:i,loadedKeys:c,loadingKeys:l,checkedKeys:s,halfCheckedKeys:d,dragOverNodeKey:h,dropPosition:g,keyEntities:u};return p.createElement(p.Fragment,null,K&&Z&&p.createElement("span",{style:P,"aria-live":"assertive"},function(e){for(var t=String(e.data.key),n=e;n.parent;)n=n.parent,t="".concat(n.data.key," > ").concat(t);return t}(Z)),p.createElement("div",{role:"tree"},p.createElement("input",{style:P,disabled:!1===w||f,tabIndex:!1!==w?R:null,onKeyDown:I,onFocus:F,onBlur:H,value:"",onChange:T})),p.createElement("div",{className:"".concat(n,"-treenode"),"aria-hidden":!0,style:{position:"absolute",pointerEvents:"none",visibility:"hidden",height:0,overflow:"hidden"}},p.createElement("div",{className:"".concat(n,"-indent")},p.createElement("div",{ref:B,className:"".concat(n,"-indent-unit")}))),p.createElement(C.Z,(0,o.Z)({},z,{data:fe,itemKey:L,height:m,fullHeight:!1,virtual:x,itemHeight:N,prefixCls:"".concat(n,"-list"),ref:j}),(function(e){var t=e.pos,n=e.data,r=n.key,a=(0,b.Z)(n,["key"]),i=e.isStart,s=e.isEnd,c=(0,k.km)(r,t);delete a.children;var l=(0,k.H8)(c,ve);return p.createElement(S,(0,o.Z)({},a,l,{active:!!Z&&r===Z.data.key,pos:t,data:e.data,isStart:i,isEnd:s,motion:y,motionNodes:r===D?ie:null,motionType:de,onMotionStart:_,onMotionEnd:pe,treeNodeRequiredProps:ve,onMouseMove:function(){U(null)}}))})))},I=p.forwardRef(R);I.displayName="NodeList";const F=I;function H(e,t){var n=new Set;return e.forEach((function(e){t.has(e)||n.add(e)})),n}function U(e){var t=e||{},n=t.disabled,o=t.disableCheckbox,r=t.checkable;return!(!n&&!o)||!1===r}function _(e,t,n,o){var r,a=[];r=o||U;var i=new Set(e.filter((function(e){var t=!!n[e];return t||a.push(e),t}))),s=new Map,c=0;return Object.keys(n).forEach((function(e){var t=n[e],o=t.level,r=s.get(o);r||(r=new Set,s.set(o,r)),r.add(t),c=Math.max(c,o)})),(0,v.ZP)(!a.length,"Tree missing follow keys: ".concat(a.slice(0,100).map((function(e){return"'".concat(e,"'")})).join(", "))),!0===t?function(e,t,n,o){for(var r=new Set(e),a=new Set,i=0;i<=n;i+=1)(t.get(i)||new Set).forEach((function(e){var t=e.key,n=e.node,a=e.children,i=void 0===a?[]:a;r.has(t)&&!o(n)&&i.filter((function(e){return!o(e.node)})).forEach((function(e){r.add(e.key)}))}));for(var s=new Set,c=n;c>=0;c-=1)(t.get(c)||new Set).forEach((function(e){var t=e.parent,n=e.node;if(!o(n)&&e.parent&&!s.has(e.parent.key))if(o(e.parent.node))s.add(t.key);else{var i=!0,c=!1;(t.children||[]).filter((function(e){return!o(e.node)})).forEach((function(e){var t=e.key,n=r.has(t);i&&!n&&(i=!1),c||!n&&!a.has(t)||(c=!0)})),i&&r.add(t.key),c&&a.add(t.key),s.add(t.key)}}));return{checkedKeys:Array.from(r),halfCheckedKeys:Array.from(H(a,r))}}(i,s,c,r):function(e,t,n,o,r){for(var a=new Set(e),i=new Set(t),s=0;s<=o;s+=1)(n.get(s)||new Set).forEach((function(e){var t=e.key,n=e.node,o=e.children,s=void 0===o?[]:o;a.has(t)||i.has(t)||r(n)||s.filter((function(e){return!r(e.node)})).forEach((function(e){a.delete(e.key)}))}));i=new Set;for(var c=new Set,l=o;l>=0;l-=1)(n.get(l)||new Set).forEach((function(e){var t=e.parent,n=e.node;if(!r(n)&&e.parent&&!c.has(e.parent.key))if(r(e.parent.node))c.add(t.key);else{var o=!0,s=!1;(t.children||[]).filter((function(e){return!r(e.node)})).forEach((function(e){var t=e.key,n=a.has(t);o&&!n&&(o=!1),s||!n&&!i.has(t)||(s=!0)})),o||a.delete(t.key),s&&i.add(t.key),c.add(t.key)}}));return{checkedKeys:Array.from(a),halfCheckedKeys:Array.from(H(i,a))}}(i,t.halfCheckedKeys,s,c,r)}var V=function(e){(0,d.Z)(n,e);var t=(0,u.Z)(n);function n(){var e;return(0,s.Z)(this,n),(e=t.apply(this,arguments)).destroyed=!1,e.state={keyEntities:{},indent:null,selectedKeys:[],checkedKeys:[],halfCheckedKeys:[],loadedKeys:[],loadingKeys:[],expandedKeys:[],dragging:!1,dragChildrenKeys:[],dropTargetKey:null,dropPosition:null,dropContainerKey:null,dropLevelOffset:null,dropTargetPos:null,dropAllowed:!0,dragOverNodeKey:null,treeData:[],flattenNodes:[],focused:!1,activeKey:null,listChanging:!1,prevProps:null},e.dragStartMousePosition=null,e.listRef=p.createRef(),e.onNodeDragStart=function(t,n){var o=e.state,r=o.expandedKeys,a=o.keyEntities,i=e.props.onDragStart,s=n.props.eventKey;e.dragNode=n,e.dragStartMousePosition={x:t.clientX,y:t.clientY};var c=(0,m._5)(r,s);e.setState({dragging:!0,dragChildrenKeys:(0,m.wA)(s,a),indent:e.listRef.current.getIndentWidth()}),e.setExpandedKeys(c),window.addEventListener("dragend",e.onWindowDragEnd),i&&i({event:t,node:(0,k.F)(n.props)})},e.onNodeDragEnter=function(t,n){var o=e.state,r=o.expandedKeys,a=o.keyEntities,s=o.dragChildrenKeys,c=o.flattenNodes,d=o.indent,u=e.props,p=u.onDragEnter,f=u.onExpand,v=u.allowDrop,h=u.direction,g=n.props.pos,y=(0,l.Z)(e).dragNode,E=(0,m.OM)(t,y,n,d,e.dragStartMousePosition,v,c,a,r,h),b=E.dropPosition,C=E.dropLevelOffset,N=E.dropTargetKey,x=E.dropContainerKey,w=E.dropTargetPos,S=E.dropAllowed,O=E.dragOverNodeKey;y&&-1===s.indexOf(N)&&S?(e.delayedDragEnterLogic||(e.delayedDragEnterLogic={}),Object.keys(e.delayedDragEnterLogic).forEach((function(t){clearTimeout(e.delayedDragEnterLogic[t])})),y.props.eventKey!==n.props.eventKey&&(t.persist(),e.delayedDragEnterLogic[g]=window.setTimeout((function(){if(e.state.dragging){var o=(0,i.Z)(r),s=a[n.props.eventKey];s&&(s.children||[]).length&&(o=(0,m.L0)(r,n.props.eventKey)),"expandedKeys"in e.props||e.setExpandedKeys(o),f&&f(o,{node:(0,k.F)(n.props),expanded:!0,nativeEvent:t.nativeEvent})}}),800)),y.props.eventKey!==N||0!==C?(e.setState({dragOverNodeKey:O,dropPosition:b,dropLevelOffset:C,dropTargetKey:N,dropContainerKey:x,dropTargetPos:w,dropAllowed:S}),p&&p({event:t,node:(0,k.F)(n.props),expandedKeys:r})):e.setState({dragOverNodeKey:null,dropPosition:null,dropLevelOffset:null,dropTargetKey:null,dropContainerKey:null,dropTargetPos:null,dropAllowed:!1})):e.setState({dragOverNodeKey:null,dropPosition:null,dropLevelOffset:null,dropTargetKey:null,dropContainerKey:null,dropTargetPos:null,dropAllowed:!1})},e.onNodeDragOver=function(t,n){var o=e.state,r=o.dragChildrenKeys,a=o.flattenNodes,i=o.keyEntities,s=o.expandedKeys,c=o.indent,d=e.props,u=d.onDragOver,p=d.allowDrop,f=d.direction,v=(0,l.Z)(e).dragNode,h=(0,m.OM)(t,v,n,c,e.dragStartMousePosition,p,a,i,s,f),g=h.dropPosition,y=h.dropLevelOffset,E=h.dropTargetKey,b=h.dropContainerKey,C=h.dropAllowed,N=h.dropTargetPos,x=h.dragOverNodeKey;v&&-1===r.indexOf(E)&&C&&(v.props.eventKey===E&&0===y?null===e.state.dropPosition&&null===e.state.dropLevelOffset&&null===e.state.dropTargetKey&&null===e.state.dropContainerKey&&null===e.state.dropTargetPos&&!1===e.state.dropAllowed&&null===e.state.dragOverNodeKey||e.setState({dropPosition:null,dropLevelOffset:null,dropTargetKey:null,dropContainerKey:null,dropTargetPos:null,dropAllowed:!1,dragOverNodeKey:null}):g===e.state.dropPosition&&y===e.state.dropLevelOffset&&E===e.state.dropTargetKey&&b===e.state.dropContainerKey&&N===e.state.dropTargetPos&&C===e.state.dropAllowed&&x===e.state.dragOverNodeKey||e.setState({dropPosition:g,dropLevelOffset:y,dropTargetKey:E,dropContainerKey:b,dropTargetPos:N,dropAllowed:C,dragOverNodeKey:x}),u&&u({event:t,node:(0,k.F)(n.props)}))},e.onNodeDragLeave=function(t,n){var o=e.props.onDragLeave;o&&o({event:t,node:(0,k.F)(n.props)})},e.onWindowDragEnd=function(t){e.onNodeDragEnd(t,null,!0),window.removeEventListener("dragend",e.onWindowDragEnd)},e.onNodeDragEnd=function(t,n){var o=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=e.props.onDragEnd;e.setState({dragOverNodeKey:null}),e.cleanDragState(),r&&!o&&r({event:t,node:(0,k.F)(n.props)}),e.dragNode=null},e.onNodeDrop=function(t,n){var o,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=e.state,s=i.dragChildrenKeys,c=i.dropPosition,l=i.dropTargetKey,d=i.dropTargetPos,u=i.dropAllowed;if(u){var p=e.props.onDrop;if(e.setState({dragOverNodeKey:null}),e.cleanDragState(),null!==l){var f=(0,a.Z)((0,a.Z)({},(0,k.H8)(l,e.getTreeNodeRequiredProps())),{},{active:(null===(o=e.getActiveItem())||void 0===o?void 0:o.data.key)===l,data:e.state.keyEntities[l].node}),h=-1!==s.indexOf(l);(0,v.ZP)(!h,"Can not drop to dragNode's children node. This is a bug of rc-tree. Please report an issue.");var g=(0,m.yx)(d),y={event:t,node:(0,k.F)(f),dragNode:e.dragNode?(0,k.F)(e.dragNode.props):null,dragNodesKeys:[e.dragNode.props.eventKey].concat(s),dropToGap:0!==c,dropPosition:c+Number(g[g.length-1])};p&&!r&&p(y),e.dragNode=null}}},e.cleanDragState=function(){e.state.dragging&&e.setState({dragging:!1,dropPosition:null,dropContainerKey:null,dropTargetKey:null,dropLevelOffset:null,dropAllowed:!0,dragOverNodeKey:null}),e.dragStartMousePosition=null},e.onNodeClick=function(t,n){var o=e.props.onClick;o&&o(t,n)},e.onNodeDoubleClick=function(t,n){var o=e.props.onDoubleClick;o&&o(t,n)},e.onNodeSelect=function(t,n){var o=e.state.selectedKeys,r=e.state.keyEntities,a=e.props,i=a.onSelect,s=a.multiple,c=n.selected,l=n.key,d=!c,u=(o=d?s?(0,m.L0)(o,l):[l]:(0,m._5)(o,l)).map((function(e){var t=r[e];return t?t.node:null})).filter((function(e){return e}));e.setUncontrolledState({selectedKeys:o}),i&&i(o,{event:"select",selected:d,node:n,selectedNodes:u,nativeEvent:t.nativeEvent})},e.onNodeCheck=function(t,n,o){var r,a=e.state,s=a.keyEntities,c=a.checkedKeys,l=a.halfCheckedKeys,d=e.props,u=d.checkStrictly,p=d.onCheck,f=n.key,v={event:"check",node:n,checked:o,nativeEvent:t.nativeEvent};if(u){var h=o?(0,m.L0)(c,f):(0,m._5)(c,f);r={checked:h,halfChecked:(0,m._5)(l,f)},v.checkedNodes=h.map((function(e){return s[e]})).filter((function(e){return e})).map((function(e){return e.node})),e.setUncontrolledState({checkedKeys:h})}else{var g=_([].concat((0,i.Z)(c),[f]),!0,s),y=g.checkedKeys,k=g.halfCheckedKeys;if(!o){var E=new Set(y);E.delete(f);var b=_(Array.from(E),{checked:!1,halfCheckedKeys:k},s);y=b.checkedKeys,k=b.halfCheckedKeys}r=y,v.checkedNodes=[],v.checkedNodesPositions=[],v.halfCheckedKeys=k,y.forEach((function(e){var t=s[e];if(t){var n=t.node,o=t.pos;v.checkedNodes.push(n),v.checkedNodesPositions.push({node:n,pos:o})}})),e.setUncontrolledState({checkedKeys:y},!1,{halfCheckedKeys:k})}p&&p(r,v)},e.onNodeLoad=function(t){return new Promise((function(n){e.setState((function(o){var r=o.loadedKeys,a=void 0===r?[]:r,i=o.loadingKeys,s=void 0===i?[]:i,c=e.props,l=c.loadData,d=c.onLoad,u=t.key;return l&&-1===a.indexOf(u)&&-1===s.indexOf(u)?(l(t).then((function(){var o=e.state,r=o.loadedKeys,a=o.loadingKeys,i=(0,m.L0)(r,u),s=(0,m._5)(a,u);d&&d(i,{event:"load",node:t}),e.setUncontrolledState({loadedKeys:i}),e.setState({loadingKeys:s}),n()})),{loadingKeys:(0,m.L0)(s,u)}):{}}))}))},e.onNodeMouseEnter=function(t,n){var o=e.props.onMouseEnter;o&&o({event:t,node:n})},e.onNodeMouseLeave=function(t,n){var o=e.props.onMouseLeave;o&&o({event:t,node:n})},e.onNodeContextMenu=function(t,n){var o=e.props.onRightClick;o&&(t.preventDefault(),o({event:t,node:n}))},e.onFocus=function(){var t=e.props.onFocus;e.setState({focused:!0}),t&&t.apply(void 0,arguments)},e.onBlur=function(){var t=e.props.onBlur;e.setState({focused:!1}),e.onActiveChange(null),t&&t.apply(void 0,arguments)},e.getTreeNodeRequiredProps=function(){var t=e.state;return{expandedKeys:t.expandedKeys||[],selectedKeys:t.selectedKeys||[],loadedKeys:t.loadedKeys||[],loadingKeys:t.loadingKeys||[],checkedKeys:t.checkedKeys||[],halfCheckedKeys:t.halfCheckedKeys||[],dragOverNodeKey:t.dragOverNodeKey,dropPosition:t.dropPosition,keyEntities:t.keyEntities}},e.setExpandedKeys=function(t){var n=e.state.treeData,o=(0,k.oH)(n,t);e.setUncontrolledState({expandedKeys:t,flattenNodes:o},!0)},e.onNodeExpand=function(t,n){var o=e.state.expandedKeys,r=e.state.listChanging,a=e.props,i=a.onExpand,s=a.loadData,c=n.key,l=n.expanded;if(!r){var d=o.indexOf(c),u=!l;if((0,v.ZP)(l&&-1!==d||!l&&-1===d,"Expand state not sync with index check"),o=u?(0,m.L0)(o,c):(0,m._5)(o,c),e.setExpandedKeys(o),i&&i(o,{node:n,expanded:u,nativeEvent:t.nativeEvent}),u&&s){var p=e.onNodeLoad(n);p&&p.then((function(){var t=(0,k.oH)(e.state.treeData,o);e.setUncontrolledState({flattenNodes:t})}))}}},e.onListChangeStart=function(){e.setUncontrolledState({listChanging:!0})},e.onListChangeEnd=function(){setTimeout((function(){e.setUncontrolledState({listChanging:!1})}))},e.onActiveChange=function(t){var n=e.state.activeKey,o=e.props.onActiveChange;n!==t&&(e.setState({activeKey:t}),null!==t&&e.scrollTo({key:t}),o&&o(t))},e.getActiveItem=function(){var t=e.state,n=t.activeKey,o=t.flattenNodes;return null===n?null:o.find((function(e){return e.data.key===n}))||null},e.offsetActiveKey=function(t){var n=e.state,o=n.flattenNodes,r=n.activeKey,a=o.findIndex((function(e){return e.data.key===r}));-1===a&&t<0&&(a=o.length);var i=o[a=(a+t+o.length)%o.length];if(i){var s=i.data.key;e.onActiveChange(s)}else e.onActiveChange(null)},e.onKeyDown=function(t){var n=e.state,o=n.activeKey,r=n.expandedKeys,i=n.checkedKeys,s=e.props,c=s.onKeyDown,l=s.checkable,d=s.selectable;switch(t.which){case f.Z.UP:e.offsetActiveKey(-1),t.preventDefault();break;case f.Z.DOWN:e.offsetActiveKey(1),t.preventDefault()}var u=e.getActiveItem();if(u&&u.data){var p=e.getTreeNodeRequiredProps(),v=!1===u.data.isLeaf||!!(u.data.children||[]).length,h=(0,k.F)((0,a.Z)((0,a.Z)({},(0,k.H8)(o,p)),{},{data:u.data,active:!0}));switch(t.which){case f.Z.LEFT:v&&r.includes(o)?e.onNodeExpand({},h):u.parent&&e.onActiveChange(u.parent.data.key),t.preventDefault();break;case f.Z.RIGHT:v&&!r.includes(o)?e.onNodeExpand({},h):u.children&&u.children.length&&e.onActiveChange(u.children[0].data.key),t.preventDefault();break;case f.Z.ENTER:case f.Z.SPACE:!l||h.disabled||!1===h.checkable||h.disableCheckbox?l||!d||h.disabled||!1===h.selectable||e.onNodeSelect({},h):e.onNodeCheck({},h,!i.includes(o))}}c&&c(t)},e.setUncontrolledState=function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(!e.destroyed){var r=!1,i=!0,s={};Object.keys(t).forEach((function(n){n in e.props?i=!1:(r=!0,s[n]=t[n])})),!r||n&&!i||e.setState((0,a.Z)((0,a.Z)({},s),o))}},e.scrollTo=function(t){e.listRef.current.scrollTo(t)},e}return(0,c.Z)(n,[{key:"componentWillUnmount",value:function(){window.removeEventListener("dragend",this.onWindowDragEnd),this.destroyed=!0}},{key:"render",value:function(){var e,t=this.state,n=t.focused,a=t.flattenNodes,i=t.keyEntities,s=t.dragging,c=t.activeKey,l=t.dropLevelOffset,d=t.dropContainerKey,u=t.dropTargetKey,f=t.dropPosition,v=t.dragOverNodeKey,h=t.indent,k=this.props,E=k.prefixCls,b=k.className,C=k.style,N=k.showLine,x=k.focusable,w=k.tabIndex,S=void 0===w?0:w,O=k.selectable,P=k.showIcon,T=k.icon,D=k.switcherIcon,Z=k.draggable,K=k.checkable,M=k.checkStrictly,A=k.disabled,L=k.motion,R=k.loadData,I=k.filterTreeNode,H=k.height,U=k.itemHeight,_=k.virtual,V=k.titleRender,z=k.dropIndicatorRender,j=k.onContextMenu,B=k.direction,W=(0,m.NL)(this.props);return p.createElement(y.k.Provider,{value:{prefixCls:E,selectable:O,showIcon:P,icon:T,switcherIcon:D,draggable:Z,checkable:K,checkStrictly:M,disabled:A,keyEntities:i,dropLevelOffset:l,dropContainerKey:d,dropTargetKey:u,dropPosition:f,dragOverNodeKey:v,indent:h,direction:B,dropIndicatorRender:z,loadData:R,filterTreeNode:I,titleRender:V,onNodeClick:this.onNodeClick,onNodeDoubleClick:this.onNodeDoubleClick,onNodeExpand:this.onNodeExpand,onNodeSelect:this.onNodeSelect,onNodeCheck:this.onNodeCheck,onNodeLoad:this.onNodeLoad,onNodeMouseEnter:this.onNodeMouseEnter,onNodeMouseLeave:this.onNodeMouseLeave,onNodeContextMenu:this.onNodeContextMenu,onNodeDragStart:this.onNodeDragStart,onNodeDragEnter:this.onNodeDragEnter,onNodeDragOver:this.onNodeDragOver,onNodeDragLeave:this.onNodeDragLeave,onNodeDragEnd:this.onNodeDragEnd,onNodeDrop:this.onNodeDrop}},p.createElement("div",{className:g()(E,b,(e={},(0,r.Z)(e,"".concat(E,"-show-line"),N),(0,r.Z)(e,"".concat(E,"-focused"),n),(0,r.Z)(e,"".concat(E,"-active-focused"),null!==c),e))},p.createElement(F,(0,o.Z)({ref:this.listRef,prefixCls:E,style:C,data:a,disabled:A,selectable:O,checkable:!!K,motion:L,dragging:s,height:H,itemHeight:U,virtual:_,focusable:x,focused:n,tabIndex:S,activeItem:this.getActiveItem(),onFocus:this.onFocus,onBlur:this.onBlur,onKeyDown:this.onKeyDown,onActiveChange:this.onActiveChange,onListChangeStart:this.onListChangeStart,onListChangeEnd:this.onListChangeEnd,onContextMenu:j},this.getTreeNodeRequiredProps(),W))))}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n,o=t.prevProps,i={prevProps:e};function s(t){return!o&&t in e||o&&o[t]!==e[t]}if(s("treeData")?n=e.treeData:s("children")&&((0,v.ZP)(!1,"`children` of Tree is deprecated. Please use `treeData` instead."),n=(0,k.zn)(e.children)),n){i.treeData=n;var c=(0,k.I8)(n);i.keyEntities=(0,a.Z)((0,r.Z)({},D,K),c.keyEntities)}var l,d=i.keyEntities||t.keyEntities;if(s("expandedKeys")||o&&s("autoExpandParent"))i.expandedKeys=e.autoExpandParent||!o&&e.defaultExpandParent?(0,m.r7)(e.expandedKeys,d):e.expandedKeys;else if(!o&&e.defaultExpandAll){var u=(0,a.Z)({},d);delete u[D],i.expandedKeys=Object.keys(u).map((function(e){return u[e].key}))}else!o&&e.defaultExpandedKeys&&(i.expandedKeys=e.autoExpandParent||e.defaultExpandParent?(0,m.r7)(e.defaultExpandedKeys,d):e.defaultExpandedKeys);if(i.expandedKeys||delete i.expandedKeys,n||i.expandedKeys){var p=(0,k.oH)(n||t.treeData,i.expandedKeys||t.expandedKeys);i.flattenNodes=p}if(e.selectable&&(s("selectedKeys")?i.selectedKeys=(0,m.BT)(e.selectedKeys,e):!o&&e.defaultSelectedKeys&&(i.selectedKeys=(0,m.BT)(e.defaultSelectedKeys,e))),e.checkable&&(s("checkedKeys")?l=(0,m.E6)(e.checkedKeys)||{}:!o&&e.defaultCheckedKeys?l=(0,m.E6)(e.defaultCheckedKeys)||{}:n&&(l=(0,m.E6)(e.checkedKeys)||{checkedKeys:t.checkedKeys,halfCheckedKeys:t.halfCheckedKeys}),l)){var f=l,h=f.checkedKeys,g=void 0===h?[]:h,y=f.halfCheckedKeys,E=void 0===y?[]:y;if(!e.checkStrictly){var b=_(g,!0,d);g=b.checkedKeys,E=b.halfCheckedKeys}i.checkedKeys=g,i.halfCheckedKeys=E}return s("loadedKeys")&&(i.loadedKeys=e.loadedKeys),i}}]),n}(p.Component);V.defaultProps={prefixCls:"rc-tree",showLine:!1,showIcon:!0,selectable:!0,multiple:!1,checkable:!1,disabled:!1,checkStrictly:!1,draggable:!1,defaultExpandParent:!0,autoExpandParent:!1,defaultExpandAll:!1,defaultExpandedKeys:[],defaultCheckedKeys:[],defaultSelectedKeys:[],dropIndicatorRender:function(e){var t=e.dropPosition,n=e.dropLevelOffset,o=e.indent,r={pointerEvents:"none",position:"absolute",right:0,backgroundColor:"red",height:2};switch(t){case-1:r.top=0,r.left=-n*o;break;case 1:r.bottom=0,r.left=-n*o;break;case 0:r.bottom=0,r.left=o}return p.createElement("div",{style:r})},allowDrop:function(){return!0}},V.TreeNode=x.Z;const z=V},10225:(e,t,n)=>{"use strict";n.d(t,{_5:()=>i,L0:()=>s,yx:()=>c,bt:()=>l,Ds:()=>d,wA:()=>u,OM:()=>f,BT:()=>v,E6:()=>h,r7:()=>g,NL:()=>y});var o=n(85061),r=n(90484),a=(n(67294),n(80334));function i(e,t){var n=e.slice(),o=n.indexOf(t);return o>=0&&n.splice(o,1),n}function s(e,t){var n=e.slice();return-1===n.indexOf(t)&&n.push(t),n}function c(e){return e.split("-")}function l(e,t){return"".concat(e,"-").concat(t)}function d(e){return e&&e.type&&e.type.isTreeNode}function u(e,t){var n=[];return function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];t.forEach((function(t){var o=t.key,r=t.children;n.push(o),e(r)}))}(t[e].children),n}function p(e){if(e.parent){var t=c(e.pos);return Number(t[t.length-1])===e.parent.children.length-1}return!1}function f(e,t,n,o,r,a,i,s,l,d){var u,f=e.clientX,v=e.clientY,h=e.target.getBoundingClientRect(),g=h.top,y=h.height,m=(("rtl"===d?-1:1)*(((null==r?void 0:r.x)||0)-f)-12)/o,k=s[n.props.eventKey];if(v<g+y/2){var E=i.findIndex((function(e){return e.data.key===k.key})),b=i[E<=0?0:E-1].data.key;k=s[b]}var C=k.key,N=k,x=k.key,w=0,S=0;if(!l.includes(C))for(var O=0;O<m&&p(k);O+=1)k=k.parent,S+=1;var P,T=k.node,D=!0;return P=c(k.pos),0===Number(P[P.length-1])&&0===k.level&&v<g+y/2&&a({dropNode:T,dropPosition:-1})&&k.key===n.props.eventKey?w=-1:(N.children||[]).length&&l.includes(x)?a({dropNode:T,dropPosition:0})?w=0:D=!1:0===S?m>-1.5?a({dropNode:T,dropPosition:1})?w=1:D=!1:a({dropNode:T,dropPosition:0})?w=0:a({dropNode:T,dropPosition:1})?w=1:D=!1:a({dropNode:T,dropPosition:1})?w=1:D=!1,{dropPosition:w,dropLevelOffset:S,dropTargetKey:k.key,dropTargetPos:k.pos,dragOverNodeKey:x,dropContainerKey:0===w?null:(null===(u=k.parent)||void 0===u?void 0:u.key)||null,dropAllowed:D}}function v(e,t){if(e)return t.multiple?e.slice():e.length?[e[0]]:e}function h(e){if(!e)return null;var t;if(Array.isArray(e))t={checkedKeys:e,halfCheckedKeys:void 0};else{if("object"!==(0,r.Z)(e))return(0,a.ZP)(!1,"`checkedKeys` is not an array or an object"),null;t={checkedKeys:e.checked||void 0,halfCheckedKeys:e.halfChecked||void 0}}return t}function g(e,t){var n=new Set;function r(e){if(!n.has(e)){var o=t[e];if(o){n.add(e);var a=o.parent;o.node.disabled||a&&r(a.key)}}}return(e||[]).forEach((function(e){r(e)})),(0,o.Z)(n)}function y(e){var t={};return Object.keys(e).forEach((function(n){(n.startsWith("data-")||n.startsWith("aria-"))&&(t[n]=e[n])})),t}n(4258)},1089:(e,t,n)=>{"use strict";n.d(t,{km:()=>d,zn:()=>u,oH:()=>p,I8:()=>v,H8:()=>h,F:()=>g});var o=n(90484),r=n(85061),a=n(28991),i=n(17375),s=n(50344),c=n(80334),l=n(10225);function d(e,t){return null!=e?e:t}function u(e){return function e(t){return(0,s.Z)(t).map((function(t){if(!(0,l.Ds)(t))return(0,c.ZP)(!t,"Tree/TreeNode can only accept TreeNode as children."),null;var n=t.key,o=t.props,r=o.children,s=(0,i.Z)(o,["children"]),d=(0,a.Z)({key:n},s),u=e(r);return u.length&&(d.children=u),d})).filter((function(e){return e}))}(e)}function p(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=new Set(!0===t?[]:t),o=[];function i(e){var s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return e.map((function(c,u){var p=(0,l.bt)(s?s.pos:"0",u),f=d(c.key,p),v=(0,a.Z)((0,a.Z)({},c),{},{parent:s,pos:p,children:null,data:c,isStart:[].concat((0,r.Z)(s?s.isStart:[]),[0===u]),isEnd:[].concat((0,r.Z)(s?s.isEnd:[]),[u===e.length-1])});return o.push(v),!0===t||n.has(f)?v.children=i(c.children||[],v):v.children=[],v}))}return i(e),o}function f(e,t,n){var r,a,i=null,s=(0,o.Z)(n);"function"===s||"string"===s?i=n:n&&"object"===s&&(r=n.childrenPropName,i=n.externalGetKey),r=r||"children",i?"string"==typeof i?a=function(e){return e[i]}:"function"==typeof i&&(a=function(e){return i(e)}):a=function(e,t){return d(e.key,t)},function n(o,i,s){var c=o?o[r]:e,d=o?(0,l.bt)(s.pos,i):"0";if(o){var u=a(o,d),p={node:o,index:i,pos:d,key:u,parentPos:s.node?s.pos:null,level:s.level+1};t(p)}c&&c.forEach((function(e,t){n(e,t,{node:o,pos:d,level:s?s.level+1:-1})}))}(null)}function v(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.initWrapper,o=t.processEntity,r=t.onProcessFinished,a=t.externalGetKey,i=t.childrenPropName,s=arguments.length>2?arguments[2]:void 0,c=a||s,l={},u={},p={posEntities:l,keyEntities:u};return n&&(p=n(p)||p),f(e,(function(e){var t=e.node,n=e.index,r=e.pos,a=e.key,i=e.parentPos,s={node:t,index:n,key:a,pos:r,level:e.level},c=d(a,r);l[r]=s,u[c]=s,s.parent=l[i],s.parent&&(s.parent.children=s.parent.children||[],s.parent.children.push(s)),o&&o(s,p)}),{externalGetKey:c,childrenPropName:i}),r&&r(p),p}function h(e,t){var n=t.expandedKeys,o=t.selectedKeys,r=t.loadedKeys,a=t.loadingKeys,i=t.checkedKeys,s=t.halfCheckedKeys,c=t.dragOverNodeKey,l=t.dropPosition,d=t.keyEntities[e];return{eventKey:e,expanded:-1!==n.indexOf(e),selected:-1!==o.indexOf(e),loaded:-1!==r.indexOf(e),loading:-1!==a.indexOf(e),checked:-1!==i.indexOf(e),halfChecked:-1!==s.indexOf(e),pos:String(d?d.pos:""),dragOver:c===e&&0===l,dragOverGapTop:c===e&&-1===l,dragOverGapBottom:c===e&&1===l}}function g(e){var t=e.data,n=e.expanded,o=e.selected,r=e.checked,i=e.loaded,s=e.loading,l=e.halfChecked,d=e.dragOver,u=e.dragOverGapTop,p=e.dragOverGapBottom,f=e.pos,v=e.active,h=(0,a.Z)((0,a.Z)({},t),{},{expanded:n,selected:o,checked:r,loaded:i,loading:s,halfChecked:l,dragOver:d,dragOverGapTop:u,dragOverGapBottom:p,pos:f,active:v});return"props"in h||Object.defineProperty(h,"props",{get:function(){return(0,c.ZP)(!1,"Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`."),e}}),h}},74768:(e,t,n)=>{"use strict";n.d(t,{Z:()=>_});var o=n(28991),r=n(22122),a=n(6610),i=n(5991),s=n(63349),c=n(10379),l=n(60446),d=n(67294),u=n(73935),p=n(75164),f=n(94999),v=n(34203),h=n(42550),g=n(64019),y=n(59015),m=n(94184),k=n.n(m);function E(e,t,n){return n?e[0]===t[0]:e[0]===t[0]&&e[1]===t[1]}var b=n(28481),C=n(17375),N=n(31131),x=n(60444);function w(e){var t=e.prefixCls,n=e.motion,o=e.animation,r=e.transitionName;return n||(o?{motionName:"".concat(t,"-").concat(o)}:r?{motionName:r}:null)}function S(e){var t=e.prefixCls,n=e.visible,a=e.zIndex,i=e.mask,s=e.maskMotion,c=e.maskAnimation,l=e.maskTransitionName;if(!i)return null;var u={};return(s||l||c)&&(u=(0,o.Z)({motionAppear:!0},w({motion:s,prefixCls:t,transitionName:l,animation:c}))),d.createElement(x.Z,(0,r.Z)({},u,{visible:n,removeOnLeave:!0}),(function(e){var n=e.className;return d.createElement("div",{style:{zIndex:a},className:k()("".concat(t,"-mask"),n)})}))}var O=n(84480),P=n(87757),T=n.n(P),D=n(92137),Z=["measure","align",null,"motion"],K=d.forwardRef((function(e,t){var n=e.visible,a=e.prefixCls,i=e.className,s=e.style,c=e.children,l=e.zIndex,u=e.stretch,f=e.destroyPopupOnHide,v=e.forceRender,h=e.align,g=e.point,y=e.getRootDomNode,m=e.getClassNameFromAlign,E=e.onAlign,C=e.onMouseEnter,N=e.onMouseLeave,S=e.onMouseDown,P=e.onTouchStart,K=(0,d.useRef)(),M=(0,d.useRef)(),A=(0,d.useState)(),L=(0,b.Z)(A,2),R=L[0],I=L[1],F=function(e){var t=d.useState({width:0,height:0}),n=(0,b.Z)(t,2),o=n[0],r=n[1];return[d.useMemo((function(){var t={};if(e){var n=o.width,r=o.height;-1!==e.indexOf("height")&&r?t.height=r:-1!==e.indexOf("minHeight")&&r&&(t.minHeight=r),-1!==e.indexOf("width")&&n?t.width=n:-1!==e.indexOf("minWidth")&&n&&(t.minWidth=n)}return t}),[e,o]),function(e){r({width:e.offsetWidth,height:e.offsetHeight})}]}(u),H=(0,b.Z)(F,2),U=H[0],_=H[1],V=function(e,t){var n=(0,d.useState)(null),o=(0,b.Z)(n,2),r=o[0],a=o[1],i=(0,d.useRef)(),s=(0,d.useRef)(!1);function c(e){s.current||a(e)}function l(){p.Z.cancel(i.current)}return(0,d.useEffect)((function(){c("measure")}),[e]),(0,d.useEffect)((function(){switch(r){case"measure":u&&_(y())}r&&(i.current=(0,p.Z)((0,D.Z)(T().mark((function e(){var t,n;return T().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=Z.indexOf(r),(n=Z[t+1])&&-1!==t&&c(n);case 3:case"end":return e.stop()}}),e)})))))}),[r]),(0,d.useEffect)((function(){return function(){s.current=!0,l()}}),[]),[r,function(e){l(),i.current=(0,p.Z)((function(){c((function(e){switch(r){case"align":return"motion";case"motion":return"stable"}return e})),null==e||e()}))}]}(n),z=(0,b.Z)(V,2),j=z[0],B=z[1],W=(0,d.useRef)();function G(){var e;null===(e=K.current)||void 0===e||e.forceAlign()}function q(e,t){if("align"===j){var n=m(t);I(n),R!==n?Promise.resolve().then((function(){G()})):B((function(){var e;null===(e=W.current)||void 0===e||e.call(W)})),null==E||E(e,t)}}var Y=(0,o.Z)({},w(e));function X(){return new Promise((function(e){W.current=e}))}["onAppearEnd","onEnterEnd","onLeaveEnd"].forEach((function(e){var t=Y[e];Y[e]=function(e,n){return B(),null==t?void 0:t(e,n)}})),d.useEffect((function(){Y.motionName||"motion"!==j||B()}),[Y.motionName,j]),d.useImperativeHandle(t,(function(){return{forceAlign:G,getElement:function(){return M.current}}}));var Q=(0,o.Z)((0,o.Z)({},U),{},{zIndex:l,opacity:"motion"!==j&&"stable"!==j&&n?0:void 0,pointerEvents:"stable"===j?void 0:"none"},s),$=!0;!(null==h?void 0:h.points)||"align"!==j&&"stable"!==j||($=!1);var J=c;return d.Children.count(c)>1&&(J=d.createElement("div",{className:"".concat(a,"-content")},c)),d.createElement(x.Z,(0,r.Z)({visible:n,ref:M,leavedClassName:"".concat(a,"-hidden")},Y,{onAppearPrepare:X,onEnterPrepare:X,removeOnLeave:f,forceRender:v}),(function(e,t){var n=e.className,r=e.style,s=k()(a,i,R,n);return d.createElement(O.Z,{target:g||y,key:"popup",ref:K,monitorWindowResize:!0,disabled:$,align:h,onAlign:q},d.createElement("div",{ref:t,className:s,onMouseEnter:C,onMouseLeave:N,onMouseDownCapture:S,onTouchStartCapture:P,style:(0,o.Z)((0,o.Z)({},r),Q)},J))}))}));K.displayName="PopupInner";const M=K;var A=d.forwardRef((function(e,t){var n=e.prefixCls,a=e.visible,i=e.zIndex,s=e.children,c=e.mobile,l=(c=void 0===c?{}:c).popupClassName,u=c.popupStyle,p=c.popupMotion,f=void 0===p?{}:p,v=c.popupRender,h=d.useRef();d.useImperativeHandle(t,(function(){return{forceAlign:function(){},getElement:function(){return h.current}}}));var g=(0,o.Z)({zIndex:i},u),y=s;return d.Children.count(s)>1&&(y=d.createElement("div",{className:"".concat(n,"-content")},s)),v&&(y=v(y)),d.createElement(x.Z,(0,r.Z)({visible:a,ref:h,removeOnLeave:!0},f),(function(e,t){var r=e.className,a=e.style,i=k()(n,l,r);return d.createElement("div",{ref:t,className:i,style:(0,o.Z)((0,o.Z)({},a),g)},y)}))}));A.displayName="MobilePopupInner";const L=A;var R=d.forwardRef((function(e,t){var n=e.visible,a=e.mobile,i=(0,C.Z)(e,["visible","mobile"]),s=(0,d.useState)(n),c=(0,b.Z)(s,2),l=c[0],u=c[1],p=(0,d.useState)(!1),f=(0,b.Z)(p,2),v=f[0],h=f[1],g=(0,o.Z)((0,o.Z)({},i),{},{visible:l});(0,d.useEffect)((function(){u(n),n&&a&&h((0,N.Z)())}),[n,a]);var y=v?d.createElement(L,(0,r.Z)({},g,{mobile:a,ref:t})):d.createElement(M,(0,r.Z)({},g,{ref:t}));return d.createElement("div",null,d.createElement(S,g),y)}));R.displayName="Popup";const I=R,F=d.createContext(null);function H(){}var U=["onClick","onMouseDown","onTouchStart","onMouseEnter","onMouseLeave","onFocus","onBlur","onContextMenu"];const _=(V=y.Z,(z=function(e){(0,c.Z)(n,e);var t=(0,l.Z)(n);function n(e){var o,i;return(0,a.Z)(this,n),(o=t.call(this,e)).popupRef=d.createRef(),o.triggerRef=d.createRef(),o.onMouseEnter=function(e){var t=o.props.mouseEnterDelay;o.fireEvents("onMouseEnter",e),o.delaySetPopupVisible(!0,t,t?null:e)},o.onMouseMove=function(e){o.fireEvents("onMouseMove",e),o.setPoint(e)},o.onMouseLeave=function(e){o.fireEvents("onMouseLeave",e),o.delaySetPopupVisible(!1,o.props.mouseLeaveDelay)},o.onPopupMouseEnter=function(){o.clearDelayTimer()},o.onPopupMouseLeave=function(e){var t;e.relatedTarget&&!e.relatedTarget.setTimeout&&(0,f.Z)(null===(t=o.popupRef.current)||void 0===t?void 0:t.getElement(),e.relatedTarget)||o.delaySetPopupVisible(!1,o.props.mouseLeaveDelay)},o.onFocus=function(e){o.fireEvents("onFocus",e),o.clearDelayTimer(),o.isFocusToShow()&&(o.focusTime=Date.now(),o.delaySetPopupVisible(!0,o.props.focusDelay))},o.onMouseDown=function(e){o.fireEvents("onMouseDown",e),o.preClickTime=Date.now()},o.onTouchStart=function(e){o.fireEvents("onTouchStart",e),o.preTouchTime=Date.now()},o.onBlur=function(e){o.fireEvents("onBlur",e),o.clearDelayTimer(),o.isBlurToHide()&&o.delaySetPopupVisible(!1,o.props.blurDelay)},o.onContextMenu=function(e){e.preventDefault(),o.fireEvents("onContextMenu",e),o.setPopupVisible(!0,e)},o.onContextMenuClose=function(){o.isContextMenuToShow()&&o.close()},o.onClick=function(e){if(o.fireEvents("onClick",e),o.focusTime){var t;if(o.preClickTime&&o.preTouchTime?t=Math.min(o.preClickTime,o.preTouchTime):o.preClickTime?t=o.preClickTime:o.preTouchTime&&(t=o.preTouchTime),Math.abs(t-o.focusTime)<20)return;o.focusTime=0}o.preClickTime=0,o.preTouchTime=0,o.isClickToShow()&&(o.isClickToHide()||o.isBlurToHide())&&e&&e.preventDefault&&e.preventDefault();var n=!o.state.popupVisible;(o.isClickToHide()&&!n||n&&o.isClickToShow())&&o.setPopupVisible(!o.state.popupVisible,e)},o.onPopupMouseDown=function(){var e;o.hasPopupMouseDown=!0,clearTimeout(o.mouseDownTimeout),o.mouseDownTimeout=window.setTimeout((function(){o.hasPopupMouseDown=!1}),0),o.context&&(e=o.context).onPopupMouseDown.apply(e,arguments)},o.onDocumentClick=function(e){if(!o.props.mask||o.props.maskClosable){var t=e.target,n=o.getRootDomNode(),r=o.getPopupDomNode();(0,f.Z)(n,t)&&!o.isContextMenuOnly()||(0,f.Z)(r,t)||o.hasPopupMouseDown||o.close()}},o.getRootDomNode=function(){var e=o.props.getTriggerDOMNode;if(e)return e(o.triggerRef.current);try{var t=(0,v.Z)(o.triggerRef.current);if(t)return t}catch(e){}return u.findDOMNode((0,s.Z)(o))},o.getPopupClassNameFromAlign=function(e){var t=[],n=o.props,r=n.popupPlacement,a=n.builtinPlacements,i=n.prefixCls,s=n.alignPoint,c=n.getPopupClassNameFromAlign;return r&&a&&t.push(function(e,t,n,o){for(var r=n.points,a=Object.keys(e),i=0;i<a.length;i+=1){var s=a[i];if(E(e[s].points,r,o))return"".concat(t,"-placement-").concat(s)}return""}(a,i,e,s)),c&&t.push(c(e)),t.join(" ")},o.getComponent=function(){var e=o.props,t=e.prefixCls,n=e.destroyPopupOnHide,a=e.popupClassName,i=e.onPopupAlign,s=e.popupMotion,c=e.popupAnimation,l=e.popupTransitionName,u=e.popupStyle,p=e.mask,f=e.maskAnimation,v=e.maskTransitionName,h=e.maskMotion,g=e.zIndex,y=e.popup,m=e.stretch,k=e.alignPoint,E=e.mobile,b=e.forceRender,C=o.state,N=C.popupVisible,x=C.point,w=o.getPopupAlign(),S={};return o.isMouseEnterToShow()&&(S.onMouseEnter=o.onPopupMouseEnter),o.isMouseLeaveToHide()&&(S.onMouseLeave=o.onPopupMouseLeave),S.onMouseDown=o.onPopupMouseDown,S.onTouchStart=o.onPopupMouseDown,d.createElement(I,(0,r.Z)({prefixCls:t,destroyPopupOnHide:n,visible:N,point:k&&x,className:a,align:w,onAlign:i,animation:c,getClassNameFromAlign:o.getPopupClassNameFromAlign},S,{stretch:m,getRootDomNode:o.getRootDomNode,style:u,mask:p,zIndex:g,transitionName:l,maskAnimation:f,maskTransitionName:v,maskMotion:h,ref:o.popupRef,motion:s,mobile:E,forceRender:b}),"function"==typeof y?y():y)},o.attachParent=function(e){p.Z.cancel(o.attachId);var t,n=o.props,r=n.getPopupContainer,a=n.getDocument,i=o.getRootDomNode();r?(i||0===r.length)&&(t=r(i)):t=a(o.getRootDomNode()).body,t?t.appendChild(e):o.attachId=(0,p.Z)((function(){o.attachParent(e)}))},o.getContainer=function(){var e=(0,o.props.getDocument)(o.getRootDomNode()).createElement("div");return e.style.position="absolute",e.style.top="0",e.style.left="0",e.style.width="100%",o.attachParent(e),e},o.setPoint=function(e){o.props.alignPoint&&e&&o.setState({point:{pageX:e.pageX,pageY:e.pageY}})},o.handlePortalUpdate=function(){o.state.prevPopupVisible!==o.state.popupVisible&&o.props.afterPopupVisibleChange(o.state.popupVisible)},o.triggerContextValue={onPopupMouseDown:o.onPopupMouseDown},i="popupVisible"in e?!!e.popupVisible:!!e.defaultPopupVisible,o.state={prevPopupVisible:i,popupVisible:i},U.forEach((function(e){o["fire".concat(e)]=function(t){o.fireEvents(e,t)}})),o}return(0,i.Z)(n,[{key:"componentDidMount",value:function(){this.componentDidUpdate()}},{key:"componentDidUpdate",value:function(){var e,t=this.props;if(this.state.popupVisible)return this.clickOutsideHandler||!this.isClickToHide()&&!this.isContextMenuToShow()||(e=t.getDocument(this.getRootDomNode()),this.clickOutsideHandler=(0,g.Z)(e,"mousedown",this.onDocumentClick)),this.touchOutsideHandler||(e=e||t.getDocument(this.getRootDomNode()),this.touchOutsideHandler=(0,g.Z)(e,"touchstart",this.onDocumentClick)),!this.contextMenuOutsideHandler1&&this.isContextMenuToShow()&&(e=e||t.getDocument(this.getRootDomNode()),this.contextMenuOutsideHandler1=(0,g.Z)(e,"scroll",this.onContextMenuClose)),void(!this.contextMenuOutsideHandler2&&this.isContextMenuToShow()&&(this.contextMenuOutsideHandler2=(0,g.Z)(window,"blur",this.onContextMenuClose)));this.clearOutsideHandler()}},{key:"componentWillUnmount",value:function(){this.clearDelayTimer(),this.clearOutsideHandler(),clearTimeout(this.mouseDownTimeout),p.Z.cancel(this.attachId)}},{key:"getPopupDomNode",value:function(){var e;return(null===(e=this.popupRef.current)||void 0===e?void 0:e.getElement())||null}},{key:"getPopupAlign",value:function(){var e=this.props,t=e.popupPlacement,n=e.popupAlign,r=e.builtinPlacements;return t&&r?function(e,t,n){var r=e[t]||{};return(0,o.Z)((0,o.Z)({},r),n)}(r,t,n):n}},{key:"setPopupVisible",value:function(e,t){var n=this.props.alignPoint,o=this.state.popupVisible;this.clearDelayTimer(),o!==e&&("popupVisible"in this.props||this.setState({popupVisible:e,prevPopupVisible:o}),this.props.onPopupVisibleChange(e)),n&&t&&e&&this.setPoint(t)}},{key:"delaySetPopupVisible",value:function(e,t,n){var o=this,r=1e3*t;if(this.clearDelayTimer(),r){var a=n?{pageX:n.pageX,pageY:n.pageY}:null;this.delayTimer=window.setTimeout((function(){o.setPopupVisible(e,a),o.clearDelayTimer()}),r)}else this.setPopupVisible(e,n)}},{key:"clearDelayTimer",value:function(){this.delayTimer&&(clearTimeout(this.delayTimer),this.delayTimer=null)}},{key:"clearOutsideHandler",value:function(){this.clickOutsideHandler&&(this.clickOutsideHandler.remove(),this.clickOutsideHandler=null),this.contextMenuOutsideHandler1&&(this.contextMenuOutsideHandler1.remove(),this.contextMenuOutsideHandler1=null),this.contextMenuOutsideHandler2&&(this.contextMenuOutsideHandler2.remove(),this.contextMenuOutsideHandler2=null),this.touchOutsideHandler&&(this.touchOutsideHandler.remove(),this.touchOutsideHandler=null)}},{key:"createTwoChains",value:function(e){var t=this.props.children.props,n=this.props;return t[e]&&n[e]?this["fire".concat(e)]:t[e]||n[e]}},{key:"isClickToShow",value:function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("click")||-1!==n.indexOf("click")}},{key:"isContextMenuOnly",value:function(){var e=this.props.action;return"contextMenu"===e||1===e.length&&"contextMenu"===e[0]}},{key:"isContextMenuToShow",value:function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("contextMenu")||-1!==n.indexOf("contextMenu")}},{key:"isClickToHide",value:function(){var e=this.props,t=e.action,n=e.hideAction;return-1!==t.indexOf("click")||-1!==n.indexOf("click")}},{key:"isMouseEnterToShow",value:function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("hover")||-1!==n.indexOf("mouseEnter")}},{key:"isMouseLeaveToHide",value:function(){var e=this.props,t=e.action,n=e.hideAction;return-1!==t.indexOf("hover")||-1!==n.indexOf("mouseLeave")}},{key:"isFocusToShow",value:function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("focus")||-1!==n.indexOf("focus")}},{key:"isBlurToHide",value:function(){var e=this.props,t=e.action,n=e.hideAction;return-1!==t.indexOf("focus")||-1!==n.indexOf("blur")}},{key:"forcePopupAlign",value:function(){var e;this.state.popupVisible&&(null===(e=this.popupRef.current)||void 0===e||e.forceAlign())}},{key:"fireEvents",value:function(e,t){var n=this.props.children.props[e];n&&n(t);var o=this.props[e];o&&o(t)}},{key:"close",value:function(){this.setPopupVisible(!1)}},{key:"render",value:function(){var e=this.state.popupVisible,t=this.props,n=t.children,r=t.forceRender,a=t.alignPoint,i=t.className,s=t.autoDestroy,c=d.Children.only(n),l={key:"trigger"};this.isContextMenuToShow()?l.onContextMenu=this.onContextMenu:l.onContextMenu=this.createTwoChains("onContextMenu"),this.isClickToHide()||this.isClickToShow()?(l.onClick=this.onClick,l.onMouseDown=this.onMouseDown,l.onTouchStart=this.onTouchStart):(l.onClick=this.createTwoChains("onClick"),l.onMouseDown=this.createTwoChains("onMouseDown"),l.onTouchStart=this.createTwoChains("onTouchStart")),this.isMouseEnterToShow()?(l.onMouseEnter=this.onMouseEnter,a&&(l.onMouseMove=this.onMouseMove)):l.onMouseEnter=this.createTwoChains("onMouseEnter"),this.isMouseLeaveToHide()?l.onMouseLeave=this.onMouseLeave:l.onMouseLeave=this.createTwoChains("onMouseLeave"),this.isFocusToShow()||this.isBlurToHide()?(l.onFocus=this.onFocus,l.onBlur=this.onBlur):(l.onFocus=this.createTwoChains("onFocus"),l.onBlur=this.createTwoChains("onBlur"));var u=k()(c&&c.props&&c.props.className,i);u&&(l.className=u);var p=(0,o.Z)({},l);(0,h.Yr)(c)&&(p.ref=(0,h.sQ)(this.triggerRef,c.ref));var f,v=d.cloneElement(c,p);return(e||this.popupRef.current||r)&&(f=d.createElement(V,{key:"portal",getContainer:this.getContainer,didUpdate:this.handlePortalUpdate},this.getComponent())),!e&&s&&(f=null),d.createElement(F.Provider,{value:this.triggerContextValue},v,f)}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n=e.popupVisible,o={};return void 0!==n&&t.popupVisible!==n&&(o.popupVisible=n,o.prevPopupVisible=t.popupVisible),o}}]),n}(d.Component)).contextType=F,z.defaultProps={prefixCls:"rc-trigger-popup",getPopupClassNameFromAlign:function(){return""},getDocument:function(e){return e?e.ownerDocument:window.document},onPopupVisibleChange:H,afterPopupVisibleChange:H,onPopupAlign:H,popupClassName:"",mouseEnterDelay:0,mouseLeaveDelay:.1,focusDelay:0,blurDelay:.15,popupStyle:{},destroyPopupOnHide:!1,popupAlign:{},defaultPopupVisible:!1,mask:!1,maskClosable:!0,action:[],showAction:[],hideAction:[],autoDestroy:!1},z);var V,z},13059:(e,t,n)=>{"use strict";n.d(t,{Z:()=>D});var o=n(22122),r=n(6610),a=n(5991),i=n(10379),s=n(60446),c=n(67294),l=n(96156),d=n(17375),u=n(87757),p=n.n(u),f=n(90484),v=n(92137),h=n(85061),g=n(94184),y=n.n(g),m=n(64217);function k(e){var t=e.responseText||e.response;if(!t)return t;try{return JSON.parse(t)}catch(e){return t}}function E(e){var t=new XMLHttpRequest;e.onProgress&&t.upload&&(t.upload.onprogress=function(t){t.total>0&&(t.percent=t.loaded/t.total*100),e.onProgress(t)});var n=new FormData;e.data&&Object.keys(e.data).forEach((function(t){var o=e.data[t];Array.isArray(o)?o.forEach((function(e){n.append("".concat(t,"[]"),e)})):n.append(t,e.data[t])})),e.file instanceof Blob?n.append(e.filename,e.file,e.file.name):n.append(e.filename,e.file),t.onerror=function(t){e.onError(t)},t.onload=function(){return t.status<200||t.status>=300?e.onError(function(e,t){var n="cannot ".concat(e.method," ").concat(e.action," ").concat(t.status,"'"),o=new Error(n);return o.status=t.status,o.method=e.method,o.url=e.action,o}(e,t),k(t)):e.onSuccess(k(t),t)},t.open(e.method,e.action,!0),e.withCredentials&&"withCredentials"in t&&(t.withCredentials=!0);var o=e.headers||{};return null!==o["X-Requested-With"]&&t.setRequestHeader("X-Requested-With","XMLHttpRequest"),Object.keys(o).forEach((function(e){null!==o[e]&&t.setRequestHeader(e,o[e])})),t.send(n),{abort:function(){t.abort()}}}var b=+new Date,C=0;function N(){return"rc-upload-".concat(b,"-").concat(++C)}var x=n(80334);const w=function(e,t){if(e&&t){var n=Array.isArray(t)?t:t.split(","),o=e.name||"",r=e.type||"",a=r.replace(/\/.*$/,"");return n.some((function(e){var t=e.trim();if(/^\*(\/\*)?$/.test(e))return!0;if("."===t.charAt(0)){var n=o.toLowerCase(),i=t.toLowerCase(),s=[i];return".jpg"!==i&&".jpeg"!==i||(s=[".jpg","jpeg"]),s.some((function(e){return n.endsWith(e)}))}return/\/\*$/.test(t)?a===t.replace(/\/.*$/,""):r===t||!!/^\w+$/.test(t)&&((0,x.ZP)(!1,"Upload takes an invalidate 'accept' type '".concat(t,"'.Skip for check.")),!0)}))}return!0},S=function(e,t,n){var o=function e(o,r){o.path=r||"",o.isFile?o.file((function(e){n(e)&&(o.fullPath&&!e.webkitRelativePath&&(Object.defineProperties(e,{webkitRelativePath:{writable:!0}}),e.webkitRelativePath=o.fullPath.replace(/^\//,""),Object.defineProperties(e,{webkitRelativePath:{writable:!1}})),t([e]))})):o.isDirectory&&function(e,t){var n=e.createReader(),o=[];!function e(){n.readEntries((function(n){var r=Array.prototype.slice.apply(n);o=o.concat(r),r.length?e():t(o)}))}()}(o,(function(t){t.forEach((function(t){e(t,"".concat(r).concat(o.name,"/"))}))}))};e.forEach((function(e){o(e.webkitGetAsEntry())}))},O=function(e){(0,i.Z)(n,e);var t=(0,s.Z)(n);function n(){var e;return(0,r.Z)(this,n),(e=t.apply(this,arguments)).state={uid:N()},e.reqs={},e.onChange=function(t){var n=e.props,o=n.accept,r=n.directory,a=t.target.files,i=(0,h.Z)(a).filter((function(e){return!r||w(e,o)}));e.uploadFiles(i),e.reset()},e.onClick=function(t){var n=e.fileInput;if(n){var o=e.props,r=o.children,a=o.onClick;if(r&&"button"===r.type){var i=n.parentNode;i.focus(),i.querySelector("button").blur()}n.click(),a&&a(t)}},e.onKeyDown=function(t){"Enter"===t.key&&e.onClick(t)},e.onFileDrop=function(t){var n=e.props.multiple;if(t.preventDefault(),"dragover"!==t.type)if(e.props.directory)S(Array.prototype.slice.call(t.dataTransfer.items),e.uploadFiles,(function(t){return w(t,e.props.accept)}));else{var o=(0,h.Z)(t.dataTransfer.files).filter((function(t){return w(t,e.props.accept)}));!1===n&&(o=o.slice(0,1)),e.uploadFiles(o)}},e.uploadFiles=function(t){var n=(0,h.Z)(t),o=n.map((function(t){return t.uid=N(),e.processFile(t,n)}));Promise.all(o).then((function(t){var n=e.props.onBatchStart;null==n||n(t.map((function(e){return{file:e.origin,parsedFile:e.parsedFile}}))),t.filter((function(e){return null!==e.parsedFile})).forEach((function(t){e.post(t)}))}))},e.processFile=function(){var t=(0,v.Z)(p().mark((function t(n,o){var r,a,i,s,c,l,d,u,v;return p().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(r=e.props.beforeUpload,a=n,!r){t.next=14;break}return t.prev=3,t.next=6,r(n,o);case 6:a=t.sent,t.next=12;break;case 9:t.prev=9,t.t0=t.catch(3),a=!1;case 12:if(!1!==a){t.next=14;break}return t.abrupt("return",{origin:n,parsedFile:null,action:null,data:null});case 14:if("function"!=typeof(i=e.props.action)){t.next=21;break}return t.next=18,i(n);case 18:s=t.sent,t.next=22;break;case 21:s=i;case 22:if("function"!=typeof(c=e.props.data)){t.next=29;break}return t.next=26,c(n);case 26:l=t.sent,t.next=30;break;case 29:l=c;case 30:return d="object"!==(0,f.Z)(a)&&"string"!=typeof a||!a?n:a,u=d instanceof File?d:new File([d],n.name,{type:n.type}),(v=u).uid=n.uid,t.abrupt("return",{origin:n,data:l,parsedFile:v,action:s});case 35:case"end":return t.stop()}}),t,null,[[3,9]])})));return function(e,n){return t.apply(this,arguments)}}(),e.saveFileInput=function(t){e.fileInput=t},e}return(0,a.Z)(n,[{key:"componentDidMount",value:function(){this._isMounted=!0}},{key:"componentWillUnmount",value:function(){this._isMounted=!1,this.abort()}},{key:"post",value:function(e){var t=this,n=e.data,o=e.origin,r=e.action,a=e.parsedFile;if(this._isMounted){var i=this.props,s=i.onStart,c=i.customRequest,l=i.name,d=i.headers,u=i.withCredentials,p=i.method,f=o.uid,v=c||E,h={action:r,filename:l,data:n,file:a,headers:d,withCredentials:u,method:p||"post",onProgress:function(e){var n=t.props.onProgress;null==n||n(e,a)},onSuccess:function(e,n){var o=t.props.onSuccess;null==o||o(e,a,n),delete t.reqs[f]},onError:function(e,n){var o=t.props.onError;null==o||o(e,n,a),delete t.reqs[f]}};s(o),this.reqs[f]=v(h)}}},{key:"reset",value:function(){this.setState({uid:N()})}},{key:"abort",value:function(e){var t=this.reqs;if(e){var n=e.uid?e.uid:e;t[n]&&t[n].abort&&t[n].abort(),delete t[n]}else Object.keys(t).forEach((function(e){t[e]&&t[e].abort&&t[e].abort(),delete t[e]}))}},{key:"render",value:function(){var e,t=this.props,n=t.component,r=t.prefixCls,a=t.className,i=t.disabled,s=t.id,u=t.style,p=t.multiple,f=t.accept,v=t.children,h=t.directory,g=t.openFileDialogOnClick,k=t.onMouseEnter,E=t.onMouseLeave,b=t.capture,C=(0,d.Z)(t,["component","prefixCls","className","disabled","id","style","multiple","accept","children","directory","openFileDialogOnClick","onMouseEnter","onMouseLeave","capture"]),N=y()((e={},(0,l.Z)(e,r,!0),(0,l.Z)(e,"".concat(r,"-disabled"),i),(0,l.Z)(e,a,a),e)),x=h?{directory:"directory",webkitdirectory:"webkitdirectory"}:{},w=i?{}:{onClick:g?this.onClick:function(){},onKeyDown:g?this.onKeyDown:function(){},onMouseEnter:k,onMouseLeave:E,onDrop:this.onFileDrop,onDragOver:this.onFileDrop,tabIndex:"0"};return c.createElement(n,(0,o.Z)({},w,{className:N,role:"button",style:u}),c.createElement("input",(0,o.Z)({},(0,m.Z)(C,{aria:!0,data:!0}),{id:s,type:"file",ref:this.saveFileInput,onClick:function(e){return e.stopPropagation()},key:this.state.uid,style:{display:"none"},accept:f},x,{multiple:p,onChange:this.onChange},null!=b?{capture:b}:{})),v)}}]),n}(c.Component);function P(){}var T=function(e){(0,i.Z)(n,e);var t=(0,s.Z)(n);function n(){var e;return(0,r.Z)(this,n),(e=t.apply(this,arguments)).saveUploader=function(t){e.uploader=t},e}return(0,a.Z)(n,[{key:"abort",value:function(e){this.uploader.abort(e)}},{key:"render",value:function(){return c.createElement(O,(0,o.Z)({},this.props,{ref:this.saveUploader}))}}]),n}(c.Component);T.defaultProps={component:"span",prefixCls:"rc-upload",data:{},headers:{},name:"file",multipart:!1,onStart:P,onError:P,onSuccess:P,multiple:!1,beforeUpload:null,customRequest:null,withCredentials:!1,openFileDialogOnClick:!0};const D=T},50344:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var o=n(67294),r=n(59864);function a(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=[];return o.Children.forEach(e,(function(e){(null!=e||t.keepEmpty)&&(Array.isArray(e)?n=n.concat(a(e)):(0,r.isFragment)(e)&&e.props?n=n.concat(a(e.props.children,t)):n.push(e))})),n}},64019:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});var o=n(73935);function r(e,t,n,r){var a=o.unstable_batchedUpdates?function(e){o.unstable_batchedUpdates(n,e)}:n;return e.addEventListener&&e.addEventListener(t,a,r),{remove:function(){e.removeEventListener&&e.removeEventListener(t,a)}}}},98924:(e,t,n)=>{"use strict";function o(){return!("undefined"==typeof window||!window.document||!window.document.createElement)}n.d(t,{Z:()=>o})},94999:(e,t,n)=>{"use strict";function o(e,t){return!!e&&e.contains(t)}n.d(t,{Z:()=>o})},44958:(e,t,n)=>{"use strict";n.d(t,{h:()=>c});var o=n(98924),r="rc-util-key";function a(e){return e.attachTo?e.attachTo:document.querySelector("head")||document.body}function i(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!(0,o.Z)())return null;var r,i=document.createElement("style");(null===(t=n.csp)||void 0===t?void 0:t.nonce)&&(i.nonce=null===(r=n.csp)||void 0===r?void 0:r.nonce),i.innerHTML=e;var s=a(n),c=s.firstChild;return n.prepend&&s.prepend?s.prepend(i):n.prepend&&c?s.insertBefore(i,c):s.appendChild(i),i}var s=new Map;function c(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=a(n);if(!s.has(o)){var c=i("",n),l=c.parentNode;s.set(o,l),l.removeChild(c)}var d,u,p,f=Array.from(s.get(o).children).find((function(e){return"STYLE"===e.tagName&&e[r]===t}));if(f)return(null===(d=n.csp)||void 0===d?void 0:d.nonce)&&f.nonce!==(null===(u=n.csp)||void 0===u?void 0:u.nonce)&&(f.nonce=null===(p=n.csp)||void 0===p?void 0:p.nonce),f.innerHTML!==e&&(f.innerHTML=e),f;var v=i(e,n);return v[r]=t,v}},34203:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});var o=n(73935);function r(e){return e instanceof HTMLElement?e:o.findDOMNode(e)}},88603:(e,t,n)=>{"use strict";n.d(t,{tS:()=>i});var o=n(85061),r=n(5110);function a(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if((0,r.Z)(e)){var n=e.nodeName.toLowerCase(),o=["input","select","textarea","button"].includes(n)||e.isContentEditable||"a"===n&&!!e.getAttribute("href"),a=e.getAttribute("tabindex"),i=Number(a),s=null;return a&&!Number.isNaN(i)?s=i:o&&null===s&&(s=0),o&&e.disabled&&(s=null),null!==s&&(s>=0||t&&s<0)}return!1}function i(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=(0,o.Z)(e.querySelectorAll("*")).filter((function(e){return a(e,t)}));return a(e,t)&&n.unshift(e),n}},5110:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});const o=function(e){if(!e)return!1;if(e.offsetParent)return!0;if(e.getBBox){var t=e.getBBox();if(t.width||t.height)return!0}if(e.getBoundingClientRect){var n=e.getBoundingClientRect();if(n.width||n.height)return!0}return!1}},15105:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});var o={MAC_ENTER:3,BACKSPACE:8,TAB:9,NUM_CENTER:12,ENTER:13,SHIFT:16,CTRL:17,ALT:18,PAUSE:19,CAPS_LOCK:20,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,PRINT_SCREEN:44,INSERT:45,DELETE:46,ZERO:48,ONE:49,TWO:50,THREE:51,FOUR:52,FIVE:53,SIX:54,SEVEN:55,EIGHT:56,NINE:57,QUESTION_MARK:63,A:65,B:66,C:67,D:68,E:69,F:70,G:71,H:72,I:73,J:74,K:75,L:76,M:77,N:78,O:79,P:80,Q:81,R:82,S:83,T:84,U:85,V:86,W:87,X:88,Y:89,Z:90,META:91,WIN_KEY_RIGHT:92,CONTEXT_MENU:93,NUM_ZERO:96,NUM_ONE:97,NUM_TWO:98,NUM_THREE:99,NUM_FOUR:100,NUM_FIVE:101,NUM_SIX:102,NUM_SEVEN:103,NUM_EIGHT:104,NUM_NINE:105,NUM_MULTIPLY:106,NUM_PLUS:107,NUM_MINUS:109,NUM_PERIOD:110,NUM_DIVISION:111,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,NUMLOCK:144,SEMICOLON:186,DASH:189,EQUALS:187,COMMA:188,PERIOD:190,SLASH:191,APOSTROPHE:192,SINGLE_QUOTE:222,OPEN_SQUARE_BRACKET:219,BACKSLASH:220,CLOSE_SQUARE_BRACKET:221,WIN_KEY:224,MAC_FF_META:224,WIN_IME:229,isTextModifyingKeyEvent:function(e){var t=e.keyCode;if(e.altKey&&!e.ctrlKey||e.metaKey||t>=o.F1&&t<=o.F12)return!1;switch(t){case o.ALT:case o.CAPS_LOCK:case o.CONTEXT_MENU:case o.CTRL:case o.DOWN:case o.END:case o.ESC:case o.HOME:case o.INSERT:case o.LEFT:case o.MAC_FF_META:case o.META:case o.NUMLOCK:case o.NUM_CENTER:case o.PAGE_DOWN:case o.PAGE_UP:case o.PAUSE:case o.PRINT_SCREEN:case o.RIGHT:case o.SHIFT:case o.UP:case o.WIN_KEY:case o.WIN_KEY_RIGHT:return!1;default:return!0}},isCharacterKey:function(e){if(e>=o.ZERO&&e<=o.NINE)return!0;if(e>=o.NUM_ZERO&&e<=o.NUM_MULTIPLY)return!0;if(e>=o.A&&e<=o.Z)return!0;if(-1!==window.navigator.userAgent.indexOf("WebKit")&&0===e)return!0;switch(e){case o.SPACE:case o.QUESTION_MARK:case o.NUM_PLUS:case o.NUM_MINUS:case o.NUM_PERIOD:case o.NUM_DIVISION:case o.SEMICOLON:case o.DASH:case o.EQUALS:case o.COMMA:case o.PERIOD:case o.SLASH:case o.APOSTROPHE:case o.SINGLE_QUOTE:case o.OPEN_SQUARE_BRACKET:case o.BACKSLASH:case o.CLOSE_SQUARE_BRACKET:return!0;default:return!1}}};const r=o},59015:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var o=n(67294),r=n(73935),a=n(98924);const i=(0,o.forwardRef)((function(e,t){var n=e.didUpdate,i=e.getContainer,s=e.children,c=(0,o.useRef)();(0,o.useImperativeHandle)(t,(function(){return{}}));var l=(0,o.useRef)(!1);return!l.current&&(0,a.Z)()&&(c.current=i(),l.current=!0),(0,o.useEffect)((function(){null==n||n(e)})),(0,o.useEffect)((function(){return function(){var e,t;null===(e=c.current)||void 0===e||null===(t=e.parentNode)||void 0===t||t.removeChild(c.current)}}),[]),c.current?r.createPortal(s,c.current):null}))},85133:(e,t,n)=>{"use strict";n.d(t,{Z:()=>T});var o,r=n(6610),a=n(5991),i=n(10379),s=n(46070),c=n(77608),l=n(90484),d=n(67294),u=n(75164),p=n(59015),f=n(98924);function v(e){if("undefined"==typeof document)return 0;if(e||void 0===o){var t=document.createElement("div");t.style.width="100%",t.style.height="200px";var n=document.createElement("div"),r=n.style;r.position="absolute",r.top="0",r.left="0",r.pointerEvents="none",r.visibility="hidden",r.width="200px",r.height="150px",r.overflow="hidden",n.appendChild(t),document.body.appendChild(n);var a=t.offsetWidth;n.style.overflow="scroll";var i=t.offsetWidth;a===i&&(i=n.clientWidth),document.body.removeChild(n),o=a-i}return o}const h=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!e)return{};var n=t.element,o=void 0===n?document.body:n,r={},a=Object.keys(e);return a.forEach((function(e){r[e]=o.style[e]})),a.forEach((function(t){o.style[t]=e[t]})),r};var g={};const y=function(e){if(document.body.scrollHeight>(window.innerHeight||document.documentElement.clientHeight)&&window.innerWidth>document.body.offsetWidth||e){var t="ant-scrolling-effect",n=new RegExp("".concat(t),"g"),o=document.body.className;if(e){if(!n.test(o))return;return h(g),g={},void(document.body.className=o.replace(n,"").trim())}var r=v();if(r&&(g=h({position:"relative",width:"calc(100% - ".concat(r,"px)")}),!n.test(o))){var a="".concat(o," ").concat(t);document.body.className=a.trim()}}};var m=n(85061),k=[],E="ant-scrolling-effect",b=new RegExp("".concat(E),"g"),C=0,N=new Map,x=function e(t){var n=this;(0,r.Z)(this,e),this.getContainer=function(){var e;return null===(e=n.options)||void 0===e?void 0:e.container},this.reLock=function(e){var t=k.find((function(e){return e.target===n.lockTarget}));t&&n.unLock(),n.options=e,t&&(t.options=e,n.lock())},this.lock=function(){var e;if(!k.some((function(e){return e.target===n.lockTarget})))if(k.some((function(e){var t,o=e.options;return(null==o?void 0:o.container)===(null===(t=n.options)||void 0===t?void 0:t.container)})))k=[].concat((0,m.Z)(k),[{target:n.lockTarget,options:n.options}]);else{var t=0,o=(null===(e=n.options)||void 0===e?void 0:e.container)||document.body;(o===document.body&&window.innerWidth-document.documentElement.clientWidth>0||o.scrollHeight>o.clientHeight)&&(t=v());var r=o.className;if(0===k.filter((function(e){var t,o=e.options;return(null==o?void 0:o.container)===(null===(t=n.options)||void 0===t?void 0:t.container)})).length&&N.set(o,h({width:"calc(100% - ".concat(t,"px)"),overflow:"hidden",overflowX:"hidden",overflowY:"hidden"},{element:o})),!b.test(r)){var a="".concat(r," ").concat(E);o.className=a.trim()}k=[].concat((0,m.Z)(k),[{target:n.lockTarget,options:n.options}])}},this.unLock=function(){var e,t=k.find((function(e){return e.target===n.lockTarget}));if(k=k.filter((function(e){return e.target!==n.lockTarget})),t&&!k.some((function(e){var n,o=e.options;return(null==o?void 0:o.container)===(null===(n=t.options)||void 0===n?void 0:n.container)}))){var o=(null===(e=n.options)||void 0===e?void 0:e.container)||document.body,r=o.className;b.test(r)&&(h(N.get(o),{element:o}),N.delete(o),o.className=o.className.replace(b,"").trim())}},this.lockTarget=C++,this.options=t};var w=0,S=(0,f.Z)(),O={},P=function(e){if(!S)return null;if(e){if("string"==typeof e)return document.querySelectorAll(e)[0];if("function"==typeof e)return e();if("object"===(0,l.Z)(e)&&e instanceof window.HTMLElement)return e}return document.body};const T=function(e){(0,i.Z)(l,e);var t,n,o=(t=l,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,o=(0,c.Z)(t);if(n){var r=(0,c.Z)(this).constructor;e=Reflect.construct(o,arguments,r)}else e=o.apply(this,arguments);return(0,s.Z)(this,e)});function l(e){var t;return(0,r.Z)(this,l),(t=o.call(this,e)).componentRef=d.createRef(),t.updateScrollLocker=function(e){var n=(e||{}).visible,o=t.props,r=o.getContainer,a=o.visible;a&&a!==n&&S&&P(r)!==t.scrollLocker.getContainer()&&t.scrollLocker.reLock({container:P(r)})},t.updateOpenCount=function(e){var n=e||{},o=n.visible,r=n.getContainer,a=t.props,i=a.visible,s=a.getContainer;i!==o&&S&&P(s)===document.body&&(i&&!o?w+=1:e&&(w-=1)),("function"==typeof s&&"function"==typeof r?s.toString()!==r.toString():s!==r)&&t.removeCurrentContainer()},t.attachToParent=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(e||t.container&&!t.container.parentNode){var n=P(t.props.getContainer);return!!n&&(n.appendChild(t.container),!0)}return!0},t.getContainer=function(){return S?(t.container||(t.container=document.createElement("div"),t.attachToParent(!0)),t.setWrapperClassName(),t.container):null},t.setWrapperClassName=function(){var e=t.props.wrapperClassName;t.container&&e&&e!==t.container.className&&(t.container.className=e)},t.removeCurrentContainer=function(){var e,n;null===(e=t.container)||void 0===e||null===(n=e.parentNode)||void 0===n||n.removeChild(t.container)},t.switchScrollingEffect=function(){1!==w||Object.keys(O).length?w||(h(O),O={},y(!0)):(y(),O=h({overflow:"hidden",overflowX:"hidden",overflowY:"hidden"}))},t.scrollLocker=new x({container:P(e.getContainer)}),t}return(0,a.Z)(l,[{key:"componentDidMount",value:function(){var e=this;this.updateOpenCount(),this.attachToParent()||(this.rafId=(0,u.Z)((function(){e.forceUpdate()})))}},{key:"componentDidUpdate",value:function(e){this.updateOpenCount(e),this.updateScrollLocker(e),this.setWrapperClassName(),this.attachToParent()}},{key:"componentWillUnmount",value:function(){var e=this.props,t=e.visible,n=e.getContainer;S&&P(n)===document.body&&(w=t&&w?w-1:w),this.removeCurrentContainer(),u.Z.cancel(this.rafId)}},{key:"render",value:function(){var e=this.props,t=e.children,n=e.forceRender,o=e.visible,r=null,a={getOpenCount:function(){return w},getContainer:this.getContainer,switchScrollingEffect:this.switchScrollingEffect,scrollLocker:this.scrollLocker};return(n||o||this.componentRef.current)&&(r=d.createElement(p.Z,{getContainer:this.getContainer,ref:this.componentRef},t(a))),r}}]),l}(d.Component)},56982:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});var o=n(67294);function r(e,t,n){var r=o.useRef({});return"value"in r.current&&!n(r.current.condition,t)||(r.current.value=e(),r.current.condition=t),r.current.value}},21770:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var o=n(28481),r=n(67294);function a(e,t){var n=t||{},a=n.defaultValue,i=n.value,s=n.onChange,c=n.postState,l=r.useState((function(){return void 0!==i?i:void 0!==a?"function"==typeof a?a():a:"function"==typeof e?e():e})),d=(0,o.Z)(l,2),u=d[0],p=d[1],f=void 0!==i?i:u;c&&(f=c(f));var v=r.useRef(!0);return r.useEffect((function(){v.current?v.current=!1:void 0===i&&p(i)}),[i]),[f,function(e){p(e),f!==e&&s&&s(e,f)}]}},31131:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});const o=function(){if("undefined"==typeof navigator||"undefined"==typeof window)return!1;var e=navigator.userAgent||navigator.vendor||window.opera;return!(!/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(e)&&!/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(null==e?void 0:e.substr(0,4)))}},98423:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var o=n(96156);function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e,t){var n=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e);return Array.isArray(t)&&t.forEach((function(e){delete n[e]})),n}},64217:(e,t,n)=>{"use strict";n.d(t,{Z:()=>d});var o=n(96156);function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var i="".concat("accept acceptCharset accessKey action allowFullScreen allowTransparency\n    alt async autoComplete autoFocus autoPlay capture cellPadding cellSpacing challenge\n    charSet checked classID className colSpan cols content contentEditable contextMenu\n    controls coords crossOrigin data dateTime default defer dir disabled download draggable\n    encType form formAction formEncType formMethod formNoValidate formTarget frameBorder\n    headers height hidden high href hrefLang htmlFor httpEquiv icon id inputMode integrity\n    is keyParams keyType kind label lang list loop low manifest marginHeight marginWidth max maxLength media\n    mediaGroup method min minLength multiple muted name noValidate nonce open\n    optimum pattern placeholder poster preload radioGroup readOnly rel required\n    reversed role rowSpan rows sandbox scope scoped scrolling seamless selected\n    shape size sizes span spellCheck src srcDoc srcLang srcSet start step style\n    summary tabIndex target title type useMap value width wmode wrap"," ").concat("onCopy onCut onPaste onCompositionEnd onCompositionStart onCompositionUpdate onKeyDown\n    onKeyPress onKeyUp onFocus onBlur onChange onInput onSubmit onClick onContextMenu onDoubleClick\n    onDrag onDragEnd onDragEnter onDragExit onDragLeave onDragOver onDragStart onDrop onMouseDown\n    onMouseEnter onMouseLeave onMouseMove onMouseOut onMouseOver onMouseUp onSelect onTouchCancel\n    onTouchEnd onTouchMove onTouchStart onScroll onWheel onAbort onCanPlay onCanPlayThrough\n    onDurationChange onEmptied onEncrypted onEnded onError onLoadedData onLoadedMetadata\n    onLoadStart onPause onPlay onPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend onTimeUpdate onVolumeChange onWaiting onLoad onError").split(/[\s\n]+/),s="aria-",c="data-";function l(e,t){return 0===e.indexOf(t)}function d(e){var t,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];t=!1===n?{aria:!0,data:!0,attr:!0}:!0===n?{aria:!0}:a({},n);var o={};return Object.keys(e).forEach((function(n){(t.aria&&("role"===n||l(n,s))||t.data&&l(n,c)||t.attr&&i.includes(n))&&(o[n]=e[n])})),o}},75164:(e,t,n)=>{"use strict";n.d(t,{Z:()=>c});var o=function(e){return+setTimeout(e,16)},r=function(e){return clearTimeout(e)};"undefined"!=typeof window&&"requestAnimationFrame"in window&&(o=function(e){return window.requestAnimationFrame(e)},r=function(e){return window.cancelAnimationFrame(e)});var a=0,i=new Map;function s(e){i.delete(e)}function c(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=a+=1;function r(t){if(0===t)s(n),e();else{var a=o((function(){r(t-1)}));i.set(n,a)}}return r(t),n}c.cancel=function(e){var t=i.get(e);return s(t),r(t)}},42550:(e,t,n)=>{"use strict";n.d(t,{mH:()=>a,sQ:()=>i,Yr:()=>s});var o=n(90484),r=n(59864);function a(e,t){"function"==typeof e?e(t):"object"===(0,o.Z)(e)&&e&&"current"in e&&(e.current=t)}function i(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){t.forEach((function(t){a(t,e)}))}}function s(e){var t,n,o=(0,r.isMemo)(e)?e.type.type:e.type;return!("function"==typeof o&&!(null===(t=o.prototype)||void 0===t?void 0:t.render)||"function"==typeof e&&!(null===(n=e.prototype)||void 0===n?void 0:n.render))}},88306:(e,t,n)=>{"use strict";function o(e,t){for(var n=e,o=0;o<t.length;o+=1){if(null==n)return;n=n[t[o]]}return n}n.d(t,{Z:()=>o})},8880:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var o=n(96156),r=n(85061),a=n(99809),i=n(88306);function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e,t,n,i){if(!t.length)return n;var l,d=(0,a.Z)(t),u=d[0],p=d.slice(1);return l=e||"number"!=typeof u?Array.isArray(e)?(0,r.Z)(e):function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e):[],i&&void 0===n&&1===p.length?delete l[u][p[0]]:l[u]=c(l[u],p,n,i),l}function l(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return t.length&&o&&void 0===n&&!(0,i.Z)(e,t.slice(0,-1))?e:c(e,t,n,o)}},80334:(e,t,n)=>{"use strict";n.d(t,{ET:()=>s,ZP:()=>c});var o={};function r(e,t){}function a(e,t){}function i(e,t,n){t||o[n]||(e(!1,n),o[n]=!0)}function s(e,t){i(a,e,t)}const c=function(e,t){i(r,e,t)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,